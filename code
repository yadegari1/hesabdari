using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Windows.Forms;
using FruitBox.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace FruitBox
{
	// Token: 0x02000058 RID: 88
	internal class AppRun
	{
		// Token: 0x060003C3 RID: 963 RVA: 0x0013CCEC File Offset: 0x0013B0EC
		[DebuggerNonUserCode]
		public AppRun()
		{
		}

		// Token: 0x060003C4 RID: 964 RVA: 0x0013CCF8 File Offset: 0x0013B0F8
		public void mmm()
		{
			bool flag = !File.Exists(Application.StartupPath + "\\fr.snk");
			if (flag)
			{
				this.CheckInstallDate();
			}
			else
			{
				string text = File.ReadAllText(Application.StartupPath + "\\fr.snk");
				fp fp = new fp();
				string right = fp.Value2(fp.Value());
				flag = (Operators.CompareString(text, right, false) != 0);
				if (flag)
				{
					this.CheckInstallDate();
				}
				else
				{
					Public_Function.dict.Add("key", text);
					this.mms();
					this.mms2();
				}
			}
		}

		// Token: 0x060003C5 RID: 965 RVA: 0x0013CD94 File Offset: 0x0013B194
		private bool Check_lic(string tarikh, string[] lic)
		{
			fp fp = new fp();
			checked
			{
				bool result;
				for (int i = 0; i < lic.Length; i++)
				{
					string lic2 = lic[i];
					bool flag = fp.Check_lic(tarikh, lic2);
					if (flag)
					{
						result = true;
						return result;
					}
				}
				result = false;
				return result;
			}
		}

		// Token: 0x060003C6 RID: 966 RVA: 0x0013CDE0 File Offset: 0x0013B1E0
		public void mms()
		{
			fp fp = new fp();
			fp.Check_Rd();
			DateTime dateTime = Conversions.ToDate(Public_Function.ShamsiToMiladi(Public_Function.dict["rd"].Split(new char[]
			{
				':'
			})[0])).AddYears(1);
			Dictionary<string, bool> dictionary = new Dictionary<string, bool>();
			bool flag = File.Exists(Application.StartupPath + "\\fr3.snk");
			string[] array;
			if (flag)
			{
				array = File.ReadAllLines(Application.StartupPath + "\\fr3.snk");
			}
			bool flag2;
			while (DateAndTime.Now.Subtract(dateTime).Days > 0)
			{
				flag = (array == null || array.Length == 0);
				if (flag)
				{
					dictionary.Add(Public_Function.MiladiToShamsi(dateTime), false);
					dateTime = dateTime.AddYears(1);
				}
				else
				{
					flag = (array != null);
					if (flag)
					{
						flag2 = !this.Check_lic(Public_Function.MiladiToShamsi(dateTime), array);
						if (flag2)
						{
							dictionary.Add(Public_Function.MiladiToShamsi(dateTime), false);
						}
					}
					else
					{
						dictionary.Add(Public_Function.MiladiToShamsi(dateTime), false);
					}
					dateTime = dateTime.AddYears(1);
				}
			}
			flag2 = (dictionary.Count > 0);
			if (flag2)
			{
				new Frm_Register2
				{
					lic_dict = dictionary
				}.ShowDialog();
			}
			else
			{
				flag2 = (Math.Abs(DateAndTime.Now.Subtract(dateTime).Days) < 30);
				bool flag3;
				if (flag2)
				{
					flag = (array != null);
					if (flag)
					{
						flag3 = !this.Check_lic(Public_Function.MiladiToShamsi(dateTime), array);
						if (flag3)
						{
							dictionary.Add(Public_Function.MiladiToShamsi(dateTime), false);
						}
					}
					else
					{
						dictionary.Add(Public_Function.MiladiToShamsi(dateTime), false);
					}
				}
				flag3 = (dictionary.Count > 0);
				if (flag3)
				{
					new Frm_Register2
					{
						days = Math.Abs(DateAndTime.Now.Subtract(dateTime).Days),
						lic_dict = dictionary
					}.ShowDialog();
				}
			}
		}

		// Token: 0x060003C7 RID: 967 RVA: 0x0013CFF8 File Offset: 0x0013B3F8
		public void mms2()
		{
			fp fp = new fp();
			fp.Check_Rd();
			DateTime dateTime = Conversions.ToDate(Public_Function.ExecuteScalar("select top 1 tarikh from furush_hag_detail order by id desc"));
			DateTime dateTime2 = Conversions.ToDate(Public_Function.ExecuteScalar("select top 1 tarikh from kharid_furush order by id desc"));
			DateTime dateTime3 = Conversions.ToDate(Public_Function.ExecuteScalar("select top 1 tarikh from furush_sardkhane_detail order by id desc"));
			bool flag = DateTime.Compare(dateTime, dateTime2) > 0;
			DateTime t;
			if (flag)
			{
				t = dateTime;
			}
			else
			{
				t = dateTime2;
			}
			flag = (DateTime.Compare(t, dateTime3) < 0);
			if (flag)
			{
				t = dateTime3;
			}
			DateTime dateTime4 = Conversions.ToDate(Public_Function.ShamsiToMiladi(Public_Function.dict["rd"].Split(new char[]
			{
				':'
			})[0])).AddYears(1);
			Dictionary<string, bool> dictionary = new Dictionary<string, bool>();
			flag = File.Exists(Application.StartupPath + "\\fr3.snk");
			string[] array;
			if (flag)
			{
				array = File.ReadAllLines(Application.StartupPath + "\\fr3.snk");
			}
			bool flag2;
			while (t.Subtract(dateTime4).Days > 0)
			{
				flag = (array == null || array.Length == 0);
				if (flag)
				{
					dictionary.Add(Public_Function.MiladiToShamsi(dateTime4), false);
					dateTime4 = dateTime4.AddYears(1);
				}
				else
				{
					flag = (array != null);
					if (flag)
					{
						flag2 = !this.Check_lic(Public_Function.MiladiToShamsi(dateTime4), array);
						if (flag2)
						{
							dictionary.Add(Public_Function.MiladiToShamsi(dateTime4), false);
						}
					}
					else
					{
						dictionary.Add(Public_Function.MiladiToShamsi(dateTime4), false);
					}
					dateTime4 = dateTime4.AddYears(1);
				}
			}
			flag2 = (dictionary.Count > 0);
			if (flag2)
			{
				new Frm_Register2
				{
					lic_dict = dictionary
				}.ShowDialog();
			}
			else
			{
				flag2 = (Math.Abs(t.Subtract(dateTime4).Days) < 30);
				bool flag3;
				if (flag2)
				{
					flag = (array != null);
					if (flag)
					{
						flag3 = !this.Check_lic(Public_Function.MiladiToShamsi(dateTime4), array);
						if (flag3)
						{
							dictionary.Add(Public_Function.MiladiToShamsi(dateTime4), false);
						}
					}
					else
					{
						dictionary.Add(Public_Function.MiladiToShamsi(dateTime4), false);
					}
				}
				flag3 = (dictionary.Count > 0);
				if (flag3)
				{
					new Frm_Register2
					{
						days = Math.Abs(t.Subtract(dateTime4).Days),
						lic_dict = dictionary
					}.ShowDialog();
				}
			}
		}

		// Token: 0x060003C8 RID: 968 RVA: 0x0013D264 File Offset: 0x0013B664
		public void mmm2()
		{
			bool flag = !File.Exists(Application.StartupPath + "\\fr2.snk");
			if (flag)
			{
				this.CheckInstallDate();
			}
			else
			{
				string left = File.ReadAllText(Application.StartupPath + "\\fr2.snk");
				fp fp = new fp();
				string right = fp.Value2(fp.Value());
				flag = (Operators.CompareString(left, right, false) != 0);
				if (flag)
				{
					this.CheckInstallDate();
				}
			}
		}

		// Token: 0x060003C9 RID: 969 RVA: 0x0013D2DC File Offset: 0x0013B6DC
		public void CheckInstallDate()
		{
			bool flag = !Public_Function.dict.ContainsKey("eval");
			if (flag)
			{
				Public_Function.dict.Add("eval", Conversions.ToString(true));
				flag = Public_Function.dict.ContainsKey("eval");
				if (flag)
				{
					Public_Function.dict["head1"] = "فقط برای آزمایش و تست نرم افزار";
					Public_Function.dict["head2"] = "فقط برای آزمایش و تست نرم افزار";
				}
			}
			setting setting = new setting();
			flag = !Public_Function.dict.ContainsKey("installdate");
			if (flag)
			{
				setting.Update("installdate", DateTime.Now.ToShortDateString());
				Public_Function.dict.Add("installdate", DateTime.Now.ToShortDateString());
			}
			flag = !Public_Function.dict.ContainsKey("owner");
			if (flag)
			{
				Public_Function.dict.Add("owner", "نسخه نمایشی");
				MyProject.Forms.Form_Main.txt_CompanyName.Text = "نسخه نمایشی";
			}
			else
			{
				Public_Function.dict["owner"] = "نسخه نمایشی";
				MyProject.Forms.Form_Main.txt_CompanyName.Text = "نسخه نمایشی";
			}
			DateTime value = DateTime.Parse(Public_Function.dict["installdate"]);
			flag = (DateTime.Now.Subtract(value).Days > 30);
			if (flag)
			{
				Frm_Secure frm_Secure = new Frm_Secure();
				frm_Secure.ShowDialog();
			}
		}
	}
}
using System;
using System.Management;
using System.Security.Cryptography;
using System.Text;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace FruitBox
{
	// Token: 0x0200005C RID: 92
	public class fp
	{
		// Token: 0x0600062F RID: 1583 RVA: 0x0013DA54 File Offset: 0x0013BE54
		public fp()
		{
			this.fp = string.Empty;
		}

		// Token: 0x06000630 RID: 1584 RVA: 0x0013DA6C File Offset: 0x0013BE6C
		public string Value()
		{
			bool flag = Public_Function.AppType == 1;
			if (flag)
			{
				this.fp = this.MakeHash(string.Concat(new string[]
				{
					"CPU >> ",
					this.cpuid(),
					"\\nBIOS >> ",
					this.biosid(),
					"\\nBASE >> ",
					this.baseid()
				}));
			}
			else
			{
				flag = (Public_Function.AppType == 2);
				if (flag)
				{
					this.fp = this.MakeHash(string.Concat(new string[]
					{
						"khCPU >> ",
						this.cpuid(),
						"\\norBIOS >> ",
						this.biosid(),
						"\\ndeBASE >> ",
						this.baseid()
					}));
				}
				else
				{
					flag = (Public_Function.AppType == 3);
					if (flag)
					{
						this.fp = this.MakeHash(string.Concat(new string[]
						{
							"barkoniCPU >> ",
							this.cpuid(),
							"\\nBIOS >> ",
							this.biosid(),
							"\\nBASE >> ",
							this.baseid()
						}));
					}
				}
			}
			return this.fp;
		}

		// Token: 0x06000631 RID: 1585 RVA: 0x0013DBA8 File Offset: 0x0013BFA8
		public string Value2(string kkk)
		{
			this.fp = this.MakeHash2(kkk);
			return this.fp.Substring(0, 39);
		}

		// Token: 0x06000632 RID: 1586 RVA: 0x0013DBD8 File Offset: 0x0013BFD8
		public string EncryptData(byte[] Message, byte[] md5)
		{
			UTF8Encoding uTF8Encoding = new UTF8Encoding();
			MD5CryptoServiceProvider mD5CryptoServiceProvider = new MD5CryptoServiceProvider();
			byte[] key = mD5CryptoServiceProvider.ComputeHash(md5);
			TripleDESCryptoServiceProvider tripleDESCryptoServiceProvider = new TripleDESCryptoServiceProvider();
			tripleDESCryptoServiceProvider.Key = key;
			tripleDESCryptoServiceProvider.Mode = CipherMode.ECB;
			tripleDESCryptoServiceProvider.Padding = PaddingMode.PKCS7;
			byte[] bt;
			try
			{
				ICryptoTransform cryptoTransform = tripleDESCryptoServiceProvider.CreateEncryptor();
				bt = cryptoTransform.TransformFinalBlock(Message, 0, Message.Length);
			}
			finally
			{
				tripleDESCryptoServiceProvider.Clear();
				mD5CryptoServiceProvider.Clear();
			}
			return this.GetHex(bt);
		}

		// Token: 0x06000633 RID: 1587 RVA: 0x0013DC68 File Offset: 0x0013C068
		private byte[] Maken(byte[] bt1, byte[] bt2)
		{
			byte[] array = new byte[16];
			int num = 0;
			checked
			{
				int arg_1F_0;
				int num2;
				do
				{
					array[num] = (bt1[num] ^ bt2[num]);
					num++;
					arg_1F_0 = num;
					num2 = 15;
				}
				while (arg_1F_0 <= num2);
				return array;
			}
		}

		// Token: 0x06000634 RID: 1588 RVA: 0x0013DC9C File Offset: 0x0013C09C
		private string MakeHash(string s)
		{
			MD5CryptoServiceProvider mD5CryptoServiceProvider = new MD5CryptoServiceProvider();
			SHA1CryptoServiceProvider sHA1CryptoServiceProvider = new SHA1CryptoServiceProvider();
			ASCIIEncoding aSCIIEncoding = new ASCIIEncoding();
			byte[] bytes = aSCIIEncoding.GetBytes(s);
			return this.GetHex(mD5CryptoServiceProvider.ComputeHash(bytes));
		}

		// Token: 0x06000635 RID: 1589 RVA: 0x0013DCD8 File Offset: 0x0013C0D8
		private string MakeHash2(string s)
		{
			MD5CryptoServiceProvider mD5CryptoServiceProvider = new MD5CryptoServiceProvider();
			SHA1CryptoServiceProvider sHA1CryptoServiceProvider = new SHA1CryptoServiceProvider();
			ASCIIEncoding aSCIIEncoding = new ASCIIEncoding();
			byte[] bytes = aSCIIEncoding.GetBytes(s);
			return this.EncryptData(sHA1CryptoServiceProvider.ComputeHash(bytes), mD5CryptoServiceProvider.ComputeHash(bytes));
		}

		// Token: 0x06000636 RID: 1590 RVA: 0x0013DD1C File Offset: 0x0013C11C
		private string GetHex(byte[] bt)
		{
			string text = string.Empty;
			int arg_0F_0 = 0;
			checked
			{
				int num = bt.Length - 1;
				int num2 = arg_0F_0;
				while (true)
				{
					int arg_D6_0 = num2;
					int num3 = num;
					if (arg_D6_0 > num3)
					{
						break;
					}
					byte b = bt[num2];
					int num4 = (int)b;
					int num5 = num4 & 15;
					int num6 = num4 >> 4 & 15;
					bool flag = num6 > 9;
					if (flag)
					{
						text += Strings.ChrW(num6 - 10 + 65).ToString();
					}
					else
					{
						text += num6.ToString();
					}
					flag = (num5 > 9);
					if (flag)
					{
						text += Strings.ChrW(num5 - 10 + 65).ToString();
					}
					else
					{
						text += num5.ToString();
					}
					flag = (num2 + 1 != bt.Length && (num2 + 1) % 2 == 0);
					if (flag)
					{
						text += "-";
					}
					num2++;
				}
				return text;
			}
		}

		// Token: 0x06000637 RID: 1591 RVA: 0x0013DE0C File Offset: 0x0013C20C
		private string id(string wmiclass, string wmiproperty, string wmibetrue)
		{
			string text = string.Empty;
			ManagementClass managementClass = new ManagementClass(wmiclass);
			ManagementObjectCollection instances = managementClass.GetInstances();
			try
			{
				ManagementObjectCollection.ManagementObjectEnumerator enumerator = instances.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ManagementObject managementObject = (ManagementObject)enumerator.Current;
					bool flag = Operators.CompareString(managementObject[wmibetrue].ToString(), "True", false) == 0;
					if (flag)
					{
						bool flag2 = Operators.CompareString(text, string.Empty, false) == 0;
						if (flag2)
						{
							try
							{
								text = managementObject[wmiproperty].ToString();
								break;
							}
							catch (Exception expr_78)
							{
								ProjectData.SetProjectError(expr_78);
								ProjectData.ClearProjectError();
							}
						}
					}
				}
			}
			finally
			{
				ManagementObjectCollection.ManagementObjectEnumerator enumerator;
				bool flag2 = enumerator != null;
				if (flag2)
				{
					((IDisposable)enumerator).Dispose();
				}
			}
			return text;
		}

		// Token: 0x06000638 RID: 1592 RVA: 0x0013DEF0 File Offset: 0x0013C2F0
		private string id(string wmiclass, string wmiproperty)
		{
			string text = string.Empty;
			ManagementClass managementClass = new ManagementClass(wmiclass);
			ManagementObjectCollection instances = managementClass.GetInstances();
			try
			{
				ManagementObjectCollection.ManagementObjectEnumerator enumerator = instances.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ManagementObject managementObject = (ManagementObject)enumerator.Current;
					bool flag = Operators.CompareString(text, string.Empty, false) == 0;
					if (flag)
					{
						try
						{
							text = managementObject[wmiproperty].ToString();
							break;
						}
						catch (Exception expr_57)
						{
							ProjectData.SetProjectError(expr_57);
							ProjectData.ClearProjectError();
						}
					}
				}
			}
			finally
			{
				ManagementObjectCollection.ManagementObjectEnumerator enumerator;
				bool flag = enumerator != null;
				if (flag)
				{
					((IDisposable)enumerator).Dispose();
				}
			}
			return text;
		}

		// Token: 0x06000639 RID: 1593 RVA: 0x0013DFB0 File Offset: 0x0013C3B0
		private string cpuid()
		{
			string text = string.Empty;
			text = this.id("Win32_Processor", "UniqueId");
			bool flag = Operators.CompareString(text, string.Empty, false) == 0;
			if (flag)
			{
				text = this.id("Win32_Processor", "ProcessorId");
				flag = (Operators.CompareString(text, string.Empty, false) == 0);
				if (flag)
				{
					text = this.id("Win32_Processor", "Name");
					flag = (Operators.CompareString(text, string.Empty, false) == 0);
					if (flag)
					{
						text = this.id("Win32_Processor", "Manufacturer");
					}
					text += this.id("Win32_Processor", "MaxClockSpeed");
				}
			}
			return text;
		}

		// Token: 0x0600063A RID: 1594 RVA: 0x0013E060 File Offset: 0x0013C460
		private string biosid()
		{
			return string.Concat(new string[]
			{
				this.id("Win32_BIOS", "Manufacturer"),
				this.id("Win32_BIOS", "SMBIOSBIOSVersion"),
				this.id("Win32_BIOS", "IdentificationCode"),
				this.id("Win32_BIOS", "SerialNumber"),
				this.id("Win32_BIOS", "ReleaseDate"),
				this.id("Win32_BIOS", "Version")
			});
		}

		// Token: 0x0600063B RID: 1595 RVA: 0x0013E0F8 File Offset: 0x0013C4F8
		private string diskid()
		{
			return this.id("Win32_DiskDrive", "Model") + this.id("Win32_DiskDrive", "Manufacturer") + this.id("Win32_DiskDrive", "Signature") + this.id("Win32_DiskDrive", "TotalHeads");
		}

		// Token: 0x0600063C RID: 1596 RVA: 0x0013E150 File Offset: 0x0013C550
		private string baseid()
		{
			return this.id("Win32_BaseBoard", "Model") + this.id("Win32_BaseBoard", "Manufacturer") + this.id("Win32_BaseBoard", "Name") + this.id("Win32_BaseBoard", "SerialNumber");
		}

		// Token: 0x0600063D RID: 1597 RVA: 0x0013E1A8 File Offset: 0x0013C5A8
		private string VideoId()
		{
			return this.id("Win32_VideoController", "DriverVersion") + this.id("Win32_VideoController", "Name");
		}

		// Token: 0x0600063E RID: 1598 RVA: 0x0013E1E0 File Offset: 0x0013C5E0
		private void Set_Rd(string t)
		{
			setting setting = new setting();
			string[] array = this.MakeHash(Public_Function.dict["key"]).Split(new char[]
			{
				'-'
			});
			string str = this.MakeHash(t + array[2]);
			Public_Function.dict.Add("rd", t + ":" + str);
			setting.Update("rd", Public_Function.dict["rd"]);
		}

		// Token: 0x0600063F RID: 1599 RVA: 0x0013E264 File Offset: 0x0013C664
		public string GetPreCode()
		{
			string[] array = this.MakeHash(Public_Function.dict["key"]).Split(new char[]
			{
				'-'
			});
			return array[2];
		}

		// Token: 0x06000640 RID: 1600 RVA: 0x0013E2A4 File Offset: 0x0013C6A4
		public bool Check_licy(string t, string lic)
		{
			bool flag = lic.Length < 14;
			bool result;
			if (flag)
			{
				result = false;
			}
			else
			{
				flag = (lic.Length > 14);
				if (flag)
				{
					result = false;
				}
				else
				{
					string[] array = this.MakeHash(Public_Function.dict["key"]).Split(new char[]
					{
						'-'
					});
					string[] array2 = this.MakeHash(t + array[2]).Split(new char[]
					{
						'-'
					});
					string left = string.Concat(new string[]
					{
						array2[0],
						"-",
						array2[1],
						"-",
						array2[2]
					});
					flag = (Operators.CompareString(left, lic, false) == 0);
					result = flag;
				}
			}
			return result;
		}

		// Token: 0x06000641 RID: 1601 RVA: 0x0013E38C File Offset: 0x0013C78C
		public bool Check_lic(string t, string lic)
		{
			string[] array = lic.Split(new char[]
			{
				':'
			});
			bool flag = array.Length < 2;
			bool result;
			if (flag)
			{
				result = false;
			}
			else
			{
				string[] array2 = this.MakeHash(Public_Function.dict["key"]).Split(new char[]
				{
					'-'
				});
				string[] array3 = this.MakeHash(t + array2[2]).Split(new char[]
				{
					'-'
				});
				string left = string.Concat(new string[]
				{
					array3[0],
					"-",
					array3[1],
					"-",
					array3[2]
				});
				flag = (Operators.CompareString(t, array[0], false) == 0);
				if (flag)
				{
					bool flag2 = Operators.CompareString(left, array[1], false) == 0;
					result = flag2;
				}
				else
				{
					result = false;
				}
			}
			return result;
		}

		// Token: 0x06000642 RID: 1602 RVA: 0x0013E490 File Offset: 0x0013C890
		public void Check_Rd()
		{
			bool flag = !Public_Function.dict.ContainsKey("rd");
			if (flag)
			{
				bool flag2 = !Public_Function.dict.ContainsKey("installdate");
				if (flag2)
				{
					setting setting = new setting();
					flag2 = !Public_Function.dict.ContainsKey("installdate");
					if (flag2)
					{
						setting.Update("installdate", DateTime.Now.ToShortDateString());
						Public_Function.dict.Add("installdate", DateTime.Now.ToShortDateString());
					}
				}
				string text = Public_Function.MiladiToShamsi(Conversions.ToDate(Public_Function.dict["installdate"]).AddDays(30.0));
				flag2 = (Operators.CompareString(text, string.Empty, false) != 0);
				if (flag2)
				{
					this.Set_Rd(text);
				}
			}
			else
			{
				bool flag2 = !Public_Function.dict.ContainsKey("installdate");
				if (flag2)
				{
					setting setting2 = new setting();
					flag2 = !Public_Function.dict.ContainsKey("installdate");
					if (flag2)
					{
						setting2.Update("installdate", DateTime.Now.ToShortDateString());
						Public_Function.dict.Add("installdate", DateTime.Now.ToShortDateString());
					}
				}
				string[] array = Public_Function.dict["rd"].ToString().Split(new char[]
				{
					':'
				});
				flag2 = (array.Length != 2);
				if (flag2)
				{
					Public_Function.dict.Remove("rd");
					this.Check_Rd();
				}
				else
				{
					string[] array2 = this.MakeHash(Public_Function.dict["key"]).Split(new char[]
					{
						'-'
					});
					string right = this.MakeHash(Public_Function.MiladiToShamsi(Conversions.ToDate(Public_Function.dict["installdate"]).AddDays(30.0)) + array2[2]);
					flag2 = (Operators.CompareString(array[1].ToUpper(), right, false) != 0);
					if (flag2)
					{
						Public_Function.dict.Remove("rd");
						this.Check_Rd();
					}
				}
			}
		}

		// Token: 0x0400025A RID: 602
		private string fp;
	}
}
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using FruitBox.My.Resources;
using Janus.Windows.EditControls;
using Janus.Windows.GridEX;
using Janus.Windows.GridEX.EditControls;
using Janus.Windows.UI;
using Janus.Windows.UI.Dock;
using Microsoft.VisualBasic.CompilerServices;

namespace FruitBox
{
	// Token: 0x02000076 RID: 118
	[DesignerGenerated]
	public class Frm_Register2 : Form
	{
		// Token: 0x0600096F RID: 2415 RVA: 0x0018768C File Offset: 0x00185A8C
		public Frm_Register2()
		{
			base.Load += new EventHandler(this.Frm_Register2_Load);
			base.FormClosing += new FormClosingEventHandler(this.Frm_Secure_FormClosing);
			Frm_Register2.__ENCAddToList(this);
			int days = -1;
			this.days = days;
			bool continueto = false;
			this.continueto = continueto;
			this.lic_dict = new Dictionary<string, bool>();
			this.b = true;
			this.InitializeComponent();
		}

		// Token: 0x06000970 RID: 2416 RVA: 0x00187700 File Offset: 0x00185B00
		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Register2.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Register2.__ENCList.Count == Frm_Register2.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Register2.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Register2.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Register2.__ENCList[num] = Frm_Register2.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Register2.__ENCList.RemoveRange(num, Frm_Register2.__ENCList.Count - num);
						Frm_Register2.__ENCList.Capacity = Frm_Register2.__ENCList.Count;
					}
					Frm_Register2.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		// Token: 0x06000971 RID: 2417 RVA: 0x00187804 File Offset: 0x00185C04
		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		// Token: 0x06000972 RID: 2418 RVA: 0x00187854 File Offset: 0x00185C54
		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			this.UiGroupBox1 = new UIGroupBox();
			this.UiGroupBox2 = new UIGroupBox();
			this.Label8 = new Label();
			this.Label10 = new Label();
			this.txt_days0 = new Label();
			this.Label2 = new Label();
			this.Label1 = new Label();
			this.txt_code = new EditBox();
			this.txt_precode = new Label();
			this.PictureBox1 = new PictureBox();
			this.UiButton3 = new UIButton();
			this.UiButton2 = new UIButton();
			this.UiButton1 = new UIButton();
			this.Label6 = new Label();
			this.txt_owner = new Label();
			this.Label5 = new Label();
			this.Label4 = new Label();
			this.Label3 = new Label();
			this.txt_days = new Label();
			this.Label7 = new Label();
			this.txt_installdate = new Label();
			this.Label9 = new Label();
			this.Timer1 = new Timer(this.components);
			((ISupportInitialize)this.UiGroupBox1).BeginInit();
			this.UiGroupBox1.SuspendLayout();
			((ISupportInitialize)this.UiGroupBox2).BeginInit();
			this.UiGroupBox2.SuspendLayout();
			((ISupportInitialize)this.PictureBox1).BeginInit();
			this.SuspendLayout();
			this.UiGroupBox1.BackgroundStyle = BackgroundStyle.Panel;
			this.UiGroupBox1.Controls.Add(this.UiGroupBox2);
			this.UiGroupBox1.Dock = DockStyle.Fill;
			this.UiGroupBox1.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, 178);
			this.UiGroupBox1.FrameStyle = Janus.Windows.EditControls.FrameStyle.None;
			Control arg_1DA_0 = this.UiGroupBox1;
			Point location = new Point(0, 0);
			arg_1DA_0.Location = location;
			this.UiGroupBox1.Name = "UiGroupBox1";
			Control arg_20A_0 = this.UiGroupBox1;
			Size size = new Size(685, 688);
			arg_20A_0.Size = size;
			this.UiGroupBox1.TabIndex = 0;
			this.UiGroupBox1.VisualStyle = PanelVisualStyle.Office2010;
			this.UiGroupBox2.BackgroundStyle = BackgroundStyle.Panel;
			this.UiGroupBox2.Controls.Add(this.Label8);
			this.UiGroupBox2.Controls.Add(this.Label10);
			this.UiGroupBox2.Controls.Add(this.txt_days0);
			this.UiGroupBox2.Controls.Add(this.Label2);
			this.UiGroupBox2.Controls.Add(this.Label1);
			this.UiGroupBox2.Controls.Add(this.txt_code);
			this.UiGroupBox2.Controls.Add(this.txt_precode);
			this.UiGroupBox2.Controls.Add(this.PictureBox1);
			this.UiGroupBox2.Controls.Add(this.UiButton3);
			this.UiGroupBox2.Controls.Add(this.UiButton2);
			this.UiGroupBox2.Controls.Add(this.UiButton1);
			this.UiGroupBox2.Controls.Add(this.Label6);
			this.UiGroupBox2.Controls.Add(this.txt_owner);
			this.UiGroupBox2.Controls.Add(this.Label5);
			this.UiGroupBox2.Controls.Add(this.Label4);
			this.UiGroupBox2.Controls.Add(this.Label3);
			this.UiGroupBox2.Controls.Add(this.txt_days);
			this.UiGroupBox2.Controls.Add(this.Label7);
			this.UiGroupBox2.Controls.Add(this.txt_installdate);
			this.UiGroupBox2.Controls.Add(this.Label9);
			Control arg_415_0 = this.UiGroupBox2;
			location = new Point(12, 3);
			arg_415_0.Location = location;
			this.UiGroupBox2.Name = "UiGroupBox2";
			Control arg_445_0 = this.UiGroupBox2;
			size = new Size(661, 681);
			arg_445_0.Size = size;
			this.UiGroupBox2.TabIndex = 1;
			this.UiGroupBox2.VisualStyle = PanelVisualStyle.Office2010;
			this.Label8.AutoSize = true;
			this.Label8.BackColor = Color.Transparent;
			this.Label8.Font = new Font("Tahoma", 12f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_4BE_0 = this.Label8;
			location = new Point(372, 591);
			arg_4BE_0.Location = location;
			this.Label8.Name = "Label8";
			Control arg_4EB_0 = this.Label8;
			size = new Size(147, 19);
			arg_4EB_0.Size = size;
			this.Label8.TabIndex = 6;
			this.Label8.Text = "www.tazminco.ir";
			this.Label10.AutoSize = true;
			this.Label10.BackColor = Color.Transparent;
			this.Label10.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_568_0 = this.Label10;
			location = new Point(525, 588);
			arg_568_0.Location = location;
			this.Label10.Name = "Label10";
			Control arg_592_0 = this.Label10;
			size = new Size(118, 28);
			arg_592_0.Size = size;
			this.Label10.TabIndex = 7;
			this.Label10.Text = "آدرس وب سایت";
			this.txt_days0.AutoSize = true;
			this.txt_days0.BackColor = Color.Transparent;
			this.txt_days0.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_60F_0 = this.txt_days0;
			location = new Point(395, 367);
			arg_60F_0.Location = location;
			this.txt_days0.Name = "txt_days0";
			Control arg_63C_0 = this.txt_days0;
			size = new Size(215, 28);
			arg_63C_0.Size = size;
			this.txt_days0.TabIndex = 0;
			this.txt_days0.Text = "روز مانده تا اتمام اشتراک سالانه";
			this.Label2.AutoSize = true;
			this.Label2.BackColor = Color.Transparent;
			this.Label2.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_6B9_0 = this.Label2;
			location = new Point(550, 497);
			arg_6B9_0.Location = location;
			this.Label2.Name = "Label2";
			Control arg_6E3_0 = this.Label2;
			size = new Size(89, 28);
			arg_6E3_0.Size = size;
			this.Label2.TabIndex = 0;
			this.Label2.Text = "شماره کارت";
			this.Label1.BackColor = Color.Transparent;
			this.Label1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.Label1.Font = new Font("Courier New", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_760_0 = this.Label1;
			location = new Point(240, 495);
			arg_760_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_78D_0 = this.Label1;
			size = new Size(405, 44);
			arg_78D_0.Size = size;
			this.Label1.TabIndex = 5;
			this.Label1.Text = "6362 1411 0457 6815";
			this.Label1.TextAlign = ContentAlignment.MiddleLeft;
			this.txt_code.Font = new Font("Courier New", 18f, FontStyle.Bold);
			Control arg_7F4_0 = this.txt_code;
			location = new Point(240, 542);
			arg_7F4_0.Location = location;
			this.txt_code.Name = "txt_code";
			Control arg_821_0 = this.txt_code;
			size = new Size(405, 35);
			arg_821_0.Size = size;
			this.txt_code.TabIndex = 0;
			this.txt_code.VisualStyle = Janus.Windows.GridEX.VisualStyle.Office2010;
			this.txt_precode.BackColor = Color.Transparent;
			this.txt_precode.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.txt_precode.Font = new Font("Courier New", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_897_0 = this.txt_precode;
			location = new Point(16, 542);
			arg_897_0.Location = location;
			this.txt_precode.Name = "txt_precode";
			Control arg_8C4_0 = this.txt_precode;
			size = new Size(218, 35);
			arg_8C4_0.Size = size;
			this.txt_precode.TabIndex = 4;
			this.txt_precode.Text = "0-1395/02/23";
			this.txt_precode.TextAlign = ContentAlignment.MiddleCenter;
			this.PictureBox1.BackColor = Color.Transparent;
			this.PictureBox1.Image = Resources._1_Shopping;
			Control arg_92E_0 = this.PictureBox1;
			location = new Point(240, 23);
			arg_92E_0.Location = location;
			this.PictureBox1.Name = "PictureBox1";
			Control arg_95E_0 = this.PictureBox1;
			size = new Size(192, 192);
			arg_95E_0.Size = size;
			this.PictureBox1.SizeMode = PictureBoxSizeMode.AutoSize;
			this.PictureBox1.TabIndex = 2;
			this.PictureBox1.TabStop = false;
			this.UiButton3.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_9C6_0 = this.UiButton3;
			location = new Point(348, 619);
			arg_9C6_0.Location = location;
			this.UiButton3.Name = "UiButton3";
			this.UiButton3.OfficeColorScheme = Janus.Windows.UI.OfficeColorScheme.Custom;
			this.UiButton3.OfficeCustomColor = Color.SteelBlue;
			Control arg_A11_0 = this.UiButton3;
			size = new Size(154, 48);
			arg_A11_0.Size = size;
			this.UiButton3.TabIndex = 1;
			this.UiButton3.Text = "فعلا ثبت نمی کنم";
			this.UiButton3.VisualStyle = Janus.Windows.UI.VisualStyle.Office2010;
			this.UiButton2.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_A7D_0 = this.UiButton2;
			location = new Point(242, 619);
			arg_A7D_0.Location = location;
			this.UiButton2.Name = "UiButton2";
			this.UiButton2.OfficeColorScheme = Janus.Windows.UI.OfficeColorScheme.Custom;
			this.UiButton2.OfficeCustomColor = Color.SteelBlue;
			Control arg_AC5_0 = this.UiButton2;
			size = new Size(99, 48);
			arg_AC5_0.Size = size;
			this.UiButton2.TabIndex = 1;
			this.UiButton2.Text = "خروج";
			this.UiButton2.Visible = false;
			this.UiButton2.VisualStyle = Janus.Windows.UI.VisualStyle.Office2010;
			this.UiButton1.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_B3E_0 = this.UiButton1;
			location = new Point(508, 619);
			arg_B3E_0.Location = location;
			this.UiButton1.Name = "UiButton1";
			this.UiButton1.OfficeColorScheme = Janus.Windows.UI.OfficeColorScheme.Custom;
			this.UiButton1.OfficeCustomColor = Color.SteelBlue;
			Control arg_B89_0 = this.UiButton1;
			size = new Size(139, 48);
			arg_B89_0.Size = size;
			this.UiButton1.TabIndex = 2;
			this.UiButton1.Text = "ثبت کد اشتراک";
			this.UiButton1.VisualStyle = Janus.Windows.UI.VisualStyle.Office2010;
			this.Label6.AutoSize = true;
			this.Label6.BackColor = Color.Transparent;
			this.Label6.Font = new Font("Tahoma", 12f, FontStyle.Regular, GraphicsUnit.Point, 178);
			Control arg_C10_0 = this.Label6;
			location = new Point(40, 343);
			arg_C10_0.Location = location;
			this.Label6.Name = "Label6";
			Control arg_C3A_0 = this.Label6;
			size = new Size(97, 19);
			arg_C3A_0.Size = size;
			this.Label6.TabIndex = 0;
			this.Label6.Text = "@tazminsoft";
			this.Label6.Visible = false;
			this.txt_owner.AutoSize = true;
			this.txt_owner.BackColor = Color.Transparent;
			this.txt_owner.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_CC4_0 = this.txt_owner;
			location = new Point(269, 234);
			arg_CC4_0.Location = location;
			this.txt_owner.Name = "txt_owner";
			Control arg_CED_0 = this.txt_owner;
			size = new Size(0, 28);
			arg_CED_0.Size = size;
			this.txt_owner.TabIndex = 0;
			this.Label5.AutoSize = true;
			this.Label5.BackColor = Color.Transparent;
			this.Label5.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_D59_0 = this.Label5;
			location = new Point(143, 340);
			arg_D59_0.Location = location;
			this.Label5.Name = "Label5";
			Control arg_D86_0 = this.Label5;
			size = new Size(147, 28);
			arg_D86_0.Size = size;
			this.Label5.TabIndex = 0;
			this.Label5.Text = "کانال تلگرام نرم افزار";
			this.Label5.Visible = false;
			this.Label4.AutoSize = true;
			this.Label4.BackColor = Color.Transparent;
			this.Label4.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_E10_0 = this.Label4;
			location = new Point(395, 467);
			arg_E10_0.Location = location;
			this.Label4.Name = "Label4";
			Control arg_E3D_0 = this.Label4;
			size = new Size(249, 28);
			arg_E3D_0.Size = size;
			this.Label4.TabIndex = 0;
			this.Label4.Text = "تلفن بخش فروش : 09390244096";
			this.Label3.AutoSize = true;
			this.Label3.BackColor = Color.Transparent;
			this.Label3.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_EBA_0 = this.Label3;
			location = new Point(198, 429);
			arg_EBA_0.Location = location;
			this.Label3.Name = "Label3";
			Control arg_EE7_0 = this.Label3;
			size = new Size(446, 28);
			arg_EE7_0.Size = size;
			this.Label3.TabIndex = 0;
			this.Label3.Text = "جهت دریافت کد اشتراک سالانه با بخش فروش تماس حاصل فرمایید";
			this.txt_days.AutoSize = true;
			this.txt_days.BackColor = Color.Transparent;
			this.txt_days.Font = new Font("Mitra", 20.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			this.txt_days.ForeColor = Color.ForestGreen;
			Control arg_F75_0 = this.txt_days;
			location = new Point(599, 364);
			arg_F75_0.Location = location;
			this.txt_days.Name = "txt_days";
			this.txt_days.RightToLeft = RightToLeft.Yes;
			Control arg_FAC_0 = this.txt_days;
			size = new Size(45, 40);
			arg_FAC_0.Size = size;
			this.txt_days.TabIndex = 0;
			this.txt_days.Text = "15";
			this.Label7.BackColor = Color.Transparent;
			this.Label7.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_1019_0 = this.Label7;
			location = new Point(26, 249);
			arg_1019_0.Location = location;
			this.Label7.Name = "Label7";
			Control arg_1046_0 = this.Label7;
			size = new Size(614, 119);
			arg_1046_0.Size = size;
			this.Label7.TabIndex = 0;
			this.Label7.Text = "با توجه به اینکه تمامی امور پشتیبانی و رفع مشکل و پاسخ دهی به مشکلات و همچنین ارائه نسخه های جدید کاملا رایگان میباشد لطفا با پرداخت اشتراک سالیانه ما را در این امر دلگرم فرمایید";
			this.Label7.TextAlign = ContentAlignment.MiddleRight;
			this.txt_installdate.AutoSize = true;
			this.txt_installdate.BackColor = Color.Transparent;
			this.txt_installdate.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_10D1_0 = this.txt_installdate;
			location = new Point(365, 395);
			arg_10D1_0.Location = location;
			this.txt_installdate.Name = "txt_installdate";
			this.txt_installdate.RightToLeft = RightToLeft.Yes;
			Control arg_110B_0 = this.txt_installdate;
			size = new Size(135, 28);
			arg_110B_0.Size = size;
			this.txt_installdate.TabIndex = 0;
			this.txt_installdate.Text = "تاریخ ثبت نرم افزار";
			this.Label9.AutoSize = true;
			this.Label9.BackColor = Color.Transparent;
			this.Label9.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_1188_0 = this.Label9;
			location = new Point(505, 395);
			arg_1188_0.Location = location;
			this.Label9.Name = "Label9";
			Control arg_11B5_0 = this.Label9;
			size = new Size(135, 28);
			arg_11B5_0.Size = size;
			this.Label9.TabIndex = 0;
			this.Label9.Text = "تاریخ ثبت نرم افزار";
			this.Timer1.Enabled = true;
			this.Timer1.Interval = 1500;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			size = new Size(685, 688);
			this.ClientSize = size;
			this.Controls.Add(this.UiGroupBox1);
			this.FormBorderStyle = FormBorderStyle.FixedSingle;
			this.KeyPreview = true;
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "Frm_Register2";
			this.ShowInTaskbar = false;
			this.StartPosition = FormStartPosition.CenterScreen;
			((ISupportInitialize)this.UiGroupBox1).EndInit();
			this.UiGroupBox1.ResumeLayout(false);
			((ISupportInitialize)this.UiGroupBox2).EndInit();
			this.UiGroupBox2.ResumeLayout(false);
			this.UiGroupBox2.PerformLayout();
			((ISupportInitialize)this.PictureBox1).EndInit();
			this.ResumeLayout(false);
		}

		// Token: 0x170002D9 RID: 729
		// (get) Token: 0x06000973 RID: 2419 RVA: 0x00188B38 File Offset: 0x00186F38
		// (set) Token: 0x06000974 RID: 2420 RVA: 0x00188B50 File Offset: 0x00186F50
		internal virtual UIGroupBox UiGroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UiGroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._UiGroupBox1 = value;
			}
		}

		// Token: 0x170002DA RID: 730
		// (get) Token: 0x06000975 RID: 2421 RVA: 0x00188B5C File Offset: 0x00186F5C
		// (set) Token: 0x06000976 RID: 2422 RVA: 0x00188B74 File Offset: 0x00186F74
		internal virtual UIGroupBox UiGroupBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UiGroupBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.UiGroupBox2_Click);
				bool flag = this._UiGroupBox2 != null;
				if (flag)
				{
					this._UiGroupBox2.Click -= value2;
				}
				this._UiGroupBox2 = value;
				flag = (this._UiGroupBox2 != null);
				if (flag)
				{
					this._UiGroupBox2.Click += value2;
				}
			}
		}

		// Token: 0x170002DB RID: 731
		// (get) Token: 0x06000977 RID: 2423 RVA: 0x00188BD4 File Offset: 0x00186FD4
		// (set) Token: 0x06000978 RID: 2424 RVA: 0x00188BEC File Offset: 0x00186FEC
		internal virtual Label Label3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label3 = value;
			}
		}

		// Token: 0x170002DC RID: 732
		// (get) Token: 0x06000979 RID: 2425 RVA: 0x00188BF8 File Offset: 0x00186FF8
		// (set) Token: 0x0600097A RID: 2426 RVA: 0x00188C10 File Offset: 0x00187010
		internal virtual Label txt_days
		{
			[DebuggerNonUserCode]
			get
			{
				return this._txt_days;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._txt_days = value;
			}
		}

		// Token: 0x170002DD RID: 733
		// (get) Token: 0x0600097B RID: 2427 RVA: 0x00188C1C File Offset: 0x0018701C
		// (set) Token: 0x0600097C RID: 2428 RVA: 0x00188C34 File Offset: 0x00187034
		internal virtual Label txt_days0
		{
			[DebuggerNonUserCode]
			get
			{
				return this._txt_days0;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._txt_days0 = value;
			}
		}

		// Token: 0x170002DE RID: 734
		// (get) Token: 0x0600097D RID: 2429 RVA: 0x00188C40 File Offset: 0x00187040
		// (set) Token: 0x0600097E RID: 2430 RVA: 0x00188C58 File Offset: 0x00187058
		internal virtual UIButton UiButton1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UiButton1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.UiButton1_Click);
				bool flag = this._UiButton1 != null;
				if (flag)
				{
					this._UiButton1.Click -= value2;
				}
				this._UiButton1 = value;
				flag = (this._UiButton1 != null);
				if (flag)
				{
					this._UiButton1.Click += value2;
				}
			}
		}

		// Token: 0x170002DF RID: 735
		// (get) Token: 0x0600097F RID: 2431 RVA: 0x00188CB8 File Offset: 0x001870B8
		// (set) Token: 0x06000980 RID: 2432 RVA: 0x00188CD0 File Offset: 0x001870D0
		internal virtual UIButton UiButton2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UiButton2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.UiButton2_Click);
				bool flag = this._UiButton2 != null;
				if (flag)
				{
					this._UiButton2.Click -= value2;
				}
				this._UiButton2 = value;
				flag = (this._UiButton2 != null);
				if (flag)
				{
					this._UiButton2.Click += value2;
				}
			}
		}

		// Token: 0x170002E0 RID: 736
		// (get) Token: 0x06000981 RID: 2433 RVA: 0x00188D30 File Offset: 0x00187130
		// (set) Token: 0x06000982 RID: 2434 RVA: 0x00188D48 File Offset: 0x00187148
		internal virtual Label Label4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label4 = value;
			}
		}

		// Token: 0x170002E1 RID: 737
		// (get) Token: 0x06000983 RID: 2435 RVA: 0x00188D54 File Offset: 0x00187154
		// (set) Token: 0x06000984 RID: 2436 RVA: 0x00188D6C File Offset: 0x0018716C
		internal virtual Label Label6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label6 = value;
			}
		}

		// Token: 0x170002E2 RID: 738
		// (get) Token: 0x06000985 RID: 2437 RVA: 0x00188D78 File Offset: 0x00187178
		// (set) Token: 0x06000986 RID: 2438 RVA: 0x00188D90 File Offset: 0x00187190
		internal virtual Label Label5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label5 = value;
			}
		}

		// Token: 0x170002E3 RID: 739
		// (get) Token: 0x06000987 RID: 2439 RVA: 0x00188D9C File Offset: 0x0018719C
		// (set) Token: 0x06000988 RID: 2440 RVA: 0x00188DB4 File Offset: 0x001871B4
		internal virtual PictureBox PictureBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox1 = value;
			}
		}

		// Token: 0x170002E4 RID: 740
		// (get) Token: 0x06000989 RID: 2441 RVA: 0x00188DC0 File Offset: 0x001871C0
		// (set) Token: 0x0600098A RID: 2442 RVA: 0x00188DD8 File Offset: 0x001871D8
		internal virtual Label Label7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label7 = value;
			}
		}

		// Token: 0x170002E5 RID: 741
		// (get) Token: 0x0600098B RID: 2443 RVA: 0x00188DE4 File Offset: 0x001871E4
		// (set) Token: 0x0600098C RID: 2444 RVA: 0x00188DFC File Offset: 0x001871FC
		internal virtual Label txt_precode
		{
			[DebuggerNonUserCode]
			get
			{
				return this._txt_precode;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._txt_precode = value;
			}
		}

		// Token: 0x170002E6 RID: 742
		// (get) Token: 0x0600098D RID: 2445 RVA: 0x00188E08 File Offset: 0x00187208
		// (set) Token: 0x0600098E RID: 2446 RVA: 0x00188E20 File Offset: 0x00187220
		internal virtual UIButton UiButton3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UiButton3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.UiButton3_Click);
				bool flag = this._UiButton3 != null;
				if (flag)
				{
					this._UiButton3.Click -= value2;
				}
				this._UiButton3 = value;
				flag = (this._UiButton3 != null);
				if (flag)
				{
					this._UiButton3.Click += value2;
				}
			}
		}

		// Token: 0x170002E7 RID: 743
		// (get) Token: 0x0600098F RID: 2447 RVA: 0x00188E80 File Offset: 0x00187280
		// (set) Token: 0x06000990 RID: 2448 RVA: 0x00188E98 File Offset: 0x00187298
		internal virtual Label Label9
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label9;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label9 = value;
			}
		}

		// Token: 0x170002E8 RID: 744
		// (get) Token: 0x06000991 RID: 2449 RVA: 0x00188EA4 File Offset: 0x001872A4
		// (set) Token: 0x06000992 RID: 2450 RVA: 0x00188EBC File Offset: 0x001872BC
		internal virtual Label txt_installdate
		{
			[DebuggerNonUserCode]
			get
			{
				return this._txt_installdate;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._txt_installdate = value;
			}
		}

		// Token: 0x170002E9 RID: 745
		// (get) Token: 0x06000993 RID: 2451 RVA: 0x00188EC8 File Offset: 0x001872C8
		// (set) Token: 0x06000994 RID: 2452 RVA: 0x00188EE0 File Offset: 0x001872E0
		internal virtual EditBox txt_code
		{
			[DebuggerNonUserCode]
			get
			{
				return this._txt_code;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._txt_code = value;
			}
		}

		// Token: 0x170002EA RID: 746
		// (get) Token: 0x06000995 RID: 2453 RVA: 0x00188EEC File Offset: 0x001872EC
		// (set) Token: 0x06000996 RID: 2454 RVA: 0x00188F04 File Offset: 0x00187304
		internal virtual Label Label2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label2 = value;
			}
		}

		// Token: 0x170002EB RID: 747
		// (get) Token: 0x06000997 RID: 2455 RVA: 0x00188F10 File Offset: 0x00187310
		// (set) Token: 0x06000998 RID: 2456 RVA: 0x00188F28 File Offset: 0x00187328
		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		// Token: 0x170002EC RID: 748
		// (get) Token: 0x06000999 RID: 2457 RVA: 0x00188F34 File Offset: 0x00187334
		// (set) Token: 0x0600099A RID: 2458 RVA: 0x00188F4C File Offset: 0x0018734C
		internal virtual Label txt_owner
		{
			[DebuggerNonUserCode]
			get
			{
				return this._txt_owner;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._txt_owner = value;
			}
		}

		// Token: 0x170002ED RID: 749
		// (get) Token: 0x0600099B RID: 2459 RVA: 0x00188F58 File Offset: 0x00187358
		// (set) Token: 0x0600099C RID: 2460 RVA: 0x00188F70 File Offset: 0x00187370
		internal virtual Label Label8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label8 = value;
			}
		}

		// Token: 0x170002EE RID: 750
		// (get) Token: 0x0600099D RID: 2461 RVA: 0x00188F7C File Offset: 0x0018737C
		// (set) Token: 0x0600099E RID: 2462 RVA: 0x00188F94 File Offset: 0x00187394
		internal virtual Label Label10
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label10;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label10 = value;
			}
		}

		// Token: 0x170002EF RID: 751
		// (get) Token: 0x0600099F RID: 2463 RVA: 0x00188FA0 File Offset: 0x001873A0
		// (set) Token: 0x060009A0 RID: 2464 RVA: 0x00188FB8 File Offset: 0x001873B8
		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		// Token: 0x170002F0 RID: 752
		// (get) Token: 0x060009A1 RID: 2465 RVA: 0x00189018 File Offset: 0x00187418
		// (set) Token: 0x060009A2 RID: 2466 RVA: 0x00189030 File Offset: 0x00187430
		public int days
		{
			[DebuggerNonUserCode]
			get
			{
				return this._days;
			}
			[DebuggerNonUserCode]
			set
			{
				this._days = value;
			}
		}

		// Token: 0x170002F1 RID: 753
		// (get) Token: 0x060009A3 RID: 2467 RVA: 0x0018903C File Offset: 0x0018743C
		// (set) Token: 0x060009A4 RID: 2468 RVA: 0x00189054 File Offset: 0x00187454
		private bool continueto
		{
			[DebuggerNonUserCode]
			get
			{
				return this._continueto;
			}
			[DebuggerNonUserCode]
			set
			{
				this._continueto = value;
			}
		}

		// Token: 0x060009A5 RID: 2469 RVA: 0x00189060 File Offset: 0x00187460
		[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
		private void UiButton2_Click(object sender, EventArgs e)
		{
			ProjectData.EndApp();
		}

		// Token: 0x060009A6 RID: 2470 RVA: 0x0018906C File Offset: 0x0018746C
		private void UiButton1_Click(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(this.txt_code.Text, string.Empty, false) == 0;
			if (!flag)
			{
				fp fp = new fp();
				string text = string.Empty;
				try
				{
					Dictionary<string, bool>.Enumerator enumerator = this.lic_dict.GetEnumerator();
					while (enumerator.MoveNext())
					{
						KeyValuePair<string, bool> current = enumerator.Current;
						flag = !current.Value;
						if (flag)
						{
							text = current.Key;
							break;
						}
					}
				}
				finally
				{
					Dictionary<string, bool>.Enumerator enumerator;
					((IDisposable)enumerator).Dispose();
				}
				string text2 = this.txt_code.Text.ToUpper();
				text2 = text2.Replace("_", "-");
				flag = fp.Check_licy(text, text2);
				if (flag)
				{
					try
					{
						File.AppendAllText(Application.StartupPath + "\\fr3.snk", text + ":" + text2 + Environment.NewLine);
						Application.Restart();
					}
					catch (Exception expr_E6)
					{
						ProjectData.SetProjectError(expr_E6);
						Frm_RegHelp frm_RegHelp = new Frm_RegHelp();
						frm_RegHelp.ShowDialog();
						ProjectData.ClearProjectError();
					}
				}
			}
		}

		// Token: 0x060009A7 RID: 2471 RVA: 0x001891A0 File Offset: 0x001875A0
		[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
		private void Frm_Secure_FormClosing(object sender, FormClosingEventArgs e)
		{
			bool flag = !this.continueto;
			if (flag)
			{
				ProjectData.EndApp();
			}
		}

		// Token: 0x060009A8 RID: 2472 RVA: 0x001891C4 File Offset: 0x001875C4
		private void Frm_Register2_Load(object sender, EventArgs e)
		{
			this.txt_owner.Text = Public_Function.dict["owner"];
			this.txt_installdate.Text = Public_Function.MiladiToShamsi(Conversions.ToDate(Public_Function.dict["installdate"]));
			fp fp = new fp();
			string str = string.Empty;
			bool flag;
			try
			{
				Dictionary<string, bool>.Enumerator enumerator = this.lic_dict.GetEnumerator();
				while (enumerator.MoveNext())
				{
					KeyValuePair<string, bool> current = enumerator.Current;
					flag = !current.Value;
					if (flag)
					{
						str = current.Key;
						break;
					}
				}
			}
			finally
			{
				Dictionary<string, bool>.Enumerator enumerator;
				((IDisposable)enumerator).Dispose();
			}
			this.txt_precode.Text = fp.GetPreCode() + "-" + str;
			flag = (this.days != -1);
			if (flag)
			{
				this.txt_days.Text = Conversions.ToString(this.days);
				this.UiButton3.Visible = true;
			}
			else
			{
				this.txt_days.Visible = false;
				this.txt_days0.Visible = false;
				this.UiButton3.Visible = false;
				flag = (this.lic_dict.Count == 1);
				if (flag)
				{
				}
			}
		}

		// Token: 0x060009A9 RID: 2473 RVA: 0x00189318 File Offset: 0x00187718
		private void UiButton3_Click(object sender, EventArgs e)
		{
			this.continueto = true;
			this.Close();
		}

		// Token: 0x060009AA RID: 2474 RVA: 0x0018932C File Offset: 0x0018772C
		private void UiGroupBox2_Click(object sender, EventArgs e)
		{
		}

		// Token: 0x060009AB RID: 2475 RVA: 0x00189330 File Offset: 0x00187730
		private void Timer1_Tick(object sender, EventArgs e)
		{
			bool flag = this.b;
			if (flag)
			{
				this.Label7.ForeColor = Color.Red;
				this.b = false;
			}
			else
			{
				this.b = true;
				this.Label7.ForeColor = Color.Black;
			}
		}

		// Token: 0x040003B8 RID: 952
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		// Token: 0x040003B9 RID: 953
		private IContainer components;

		// Token: 0x040003BA RID: 954
		[AccessedThroughProperty("UiGroupBox1")]
		private UIGroupBox _UiGroupBox1;

		// Token: 0x040003BB RID: 955
		[AccessedThroughProperty("UiGroupBox2")]
		private UIGroupBox _UiGroupBox2;

		// Token: 0x040003BC RID: 956
		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		// Token: 0x040003BD RID: 957
		[AccessedThroughProperty("txt_days")]
		private Label _txt_days;

		// Token: 0x040003BE RID: 958
		[AccessedThroughProperty("txt_days0")]
		private Label _txt_days0;

		// Token: 0x040003BF RID: 959
		[AccessedThroughProperty("UiButton1")]
		private UIButton _UiButton1;

		// Token: 0x040003C0 RID: 960
		[AccessedThroughProperty("UiButton2")]
		private UIButton _UiButton2;

		// Token: 0x040003C1 RID: 961
		[AccessedThroughProperty("Label4")]
		private Label _Label4;

		// Token: 0x040003C2 RID: 962
		[AccessedThroughProperty("Label6")]
		private Label _Label6;

		// Token: 0x040003C3 RID: 963
		[AccessedThroughProperty("Label5")]
		private Label _Label5;

		// Token: 0x040003C4 RID: 964
		[AccessedThroughProperty("PictureBox1")]
		private PictureBox _PictureBox1;

		// Token: 0x040003C5 RID: 965
		[AccessedThroughProperty("Label7")]
		private Label _Label7;

		// Token: 0x040003C6 RID: 966
		[AccessedThroughProperty("txt_precode")]
		private Label _txt_precode;

		// Token: 0x040003C7 RID: 967
		[AccessedThroughProperty("UiButton3")]
		private UIButton _UiButton3;

		// Token: 0x040003C8 RID: 968
		[AccessedThroughProperty("Label9")]
		private Label _Label9;

		// Token: 0x040003C9 RID: 969
		[AccessedThroughProperty("txt_installdate")]
		private Label _txt_installdate;

		// Token: 0x040003CA RID: 970
		[AccessedThroughProperty("txt_code")]
		private EditBox _txt_code;

		// Token: 0x040003CB RID: 971
		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		// Token: 0x040003CC RID: 972
		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		// Token: 0x040003CD RID: 973
		[AccessedThroughProperty("txt_owner")]
		private Label _txt_owner;

		// Token: 0x040003CE RID: 974
		[AccessedThroughProperty("Label8")]
		private Label _Label8;

		// Token: 0x040003CF RID: 975
		[AccessedThroughProperty("Label10")]
		private Label _Label10;

		// Token: 0x040003D0 RID: 976
		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		// Token: 0x040003D1 RID: 977
		[CompilerGenerated]
		private int _days;

		// Token: 0x040003D2 RID: 978
		[CompilerGenerated]
		private bool _continueto;

		// Token: 0x040003D3 RID: 979
		public Dictionary<string, bool> lic_dict;

		// Token: 0x040003D4 RID: 980
		private bool b;
	}
}
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using FruitBox.My.Resources;
using Janus.Windows.EditControls;
using Janus.Windows.GridEX;
using Janus.Windows.GridEX.EditControls;
using Janus.Windows.UI;
using Janus.Windows.UI.Dock;
using Microsoft.VisualBasic.CompilerServices;

namespace FruitBox
{
	// Token: 0x02000075 RID: 117
	[DesignerGenerated]
	public class Frm_Register : Form
	{
		// Token: 0x06000943 RID: 2371 RVA: 0x00185DE4 File Offset: 0x001841E4
		public Frm_Register()
		{
			base.Load += new EventHandler(this.Frm_Register_Load);
			Frm_Register.__ENCAddToList(this);
			this.fp = new fp();
			this.InitializeComponent();
		}

		// Token: 0x06000944 RID: 2372 RVA: 0x00185E1C File Offset: 0x0018421C
		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Register.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Register.__ENCList.Count == Frm_Register.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Register.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Register.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Register.__ENCList[num] = Frm_Register.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Register.__ENCList.RemoveRange(num, Frm_Register.__ENCList.Count - num);
						Frm_Register.__ENCList.Capacity = Frm_Register.__ENCList.Count;
					}
					Frm_Register.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		// Token: 0x06000945 RID: 2373 RVA: 0x00185F20 File Offset: 0x00184320
		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		// Token: 0x06000946 RID: 2374 RVA: 0x00185F70 File Offset: 0x00184370
		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			this.UiGroupBox1 = new UIGroupBox();
			this.UiGroupBox2 = new UIGroupBox();
			this.lbl_head2 = new Label();
			this.lbl_head1 = new Label();
			this.txt_head2 = new EditBox(this.components);
			this.txt_head1 = new EditBox(this.components);
			this.txt_company = new EditBox(this.components);
			this.UiGroupBox4 = new UIGroupBox();
			this.Label8 = new Label();
			this.Label7 = new Label();
			this.Label3 = new Label();
			this.UiButton2 = new UIButton();
			this.UiButton1 = new UIButton();
			this.EditBox1 = new EditBox();
			this.EditBox2 = new EditBox();
			this.Label2 = new Label();
			this.Label1 = new Label();
			((ISupportInitialize)this.UiGroupBox1).BeginInit();
			this.UiGroupBox1.SuspendLayout();
			((ISupportInitialize)this.UiGroupBox2).BeginInit();
			this.UiGroupBox2.SuspendLayout();
			((ISupportInitialize)this.UiGroupBox4).BeginInit();
			this.SuspendLayout();
			this.UiGroupBox1.BackgroundStyle = BackgroundStyle.Panel;
			this.UiGroupBox1.Controls.Add(this.UiGroupBox2);
			this.UiGroupBox1.Dock = DockStyle.Fill;
			this.UiGroupBox1.FrameStyle = Janus.Windows.EditControls.FrameStyle.None;
			Control arg_17C_0 = this.UiGroupBox1;
			Point location = new Point(0, 0);
			arg_17C_0.Location = location;
			this.UiGroupBox1.Name = "UiGroupBox1";
			Control arg_1AC_0 = this.UiGroupBox1;
			Size size = new Size(761, 355);
			arg_1AC_0.Size = size;
			this.UiGroupBox1.TabIndex = 0;
			this.UiGroupBox1.VisualStyle = PanelVisualStyle.Office2010;
			this.UiGroupBox2.BackgroundStyle = BackgroundStyle.Panel;
			this.UiGroupBox2.Controls.Add(this.lbl_head2);
			this.UiGroupBox2.Controls.Add(this.lbl_head1);
			this.UiGroupBox2.Controls.Add(this.txt_head2);
			this.UiGroupBox2.Controls.Add(this.txt_head1);
			this.UiGroupBox2.Controls.Add(this.txt_company);
			this.UiGroupBox2.Controls.Add(this.UiGroupBox4);
			this.UiGroupBox2.Controls.Add(this.Label8);
			this.UiGroupBox2.Controls.Add(this.Label7);
			this.UiGroupBox2.Controls.Add(this.Label3);
			this.UiGroupBox2.Controls.Add(this.UiButton2);
			this.UiGroupBox2.Controls.Add(this.UiButton1);
			this.UiGroupBox2.Controls.Add(this.EditBox1);
			this.UiGroupBox2.Controls.Add(this.EditBox2);
			this.UiGroupBox2.Controls.Add(this.Label2);
			this.UiGroupBox2.Controls.Add(this.Label1);
			Control arg_343_0 = this.UiGroupBox2;
			location = new Point(7, 3);
			arg_343_0.Location = location;
			this.UiGroupBox2.Name = "UiGroupBox2";
			Control arg_373_0 = this.UiGroupBox2;
			size = new Size(745, 347);
			arg_373_0.Size = size;
			this.UiGroupBox2.TabIndex = 3;
			this.UiGroupBox2.VisualStyle = PanelVisualStyle.Office2010;
			this.lbl_head2.AutoSize = true;
			Control arg_3B6_0 = this.lbl_head2;
			location = new Point(16, 252);
			arg_3B6_0.Location = location;
			this.lbl_head2.Name = "lbl_head2";
			Control arg_3E3_0 = this.lbl_head2;
			size = new Size(620, 19);
			arg_3E3_0.Size = size;
			this.lbl_head2.TabIndex = 27;
			this.lbl_head2.Text = "مانند : میدان بزرگ میوه و تره بار تهران پلاک 99 - تلفن :0214410 - همراه : 091235687412";
			this.lbl_head1.AutoSize = true;
			Control arg_42E_0 = this.lbl_head1;
			location = new Point(451, 174);
			arg_42E_0.Location = location;
			this.lbl_head1.Name = "lbl_head1";
			Control arg_45B_0 = this.lbl_head1;
			size = new Size(185, 19);
			arg_45B_0.Size = size;
			this.lbl_head1.TabIndex = 27;
			this.lbl_head1.Text = "مانند : بارفروشی کیوانمهر";
			this.txt_head2.AcceptEnter = true;
			this.txt_head2.AllowEdit = true;
			this.txt_head2.AllowNew = true;
			this.txt_head2.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.txt_head2.FocusColor = true;
			this.txt_head2.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_4FA_0 = this.txt_head2;
			location = new Point(16, 203);
			arg_4FA_0.Location = location;
			this.txt_head2.Name = "txt_head2";
			this.txt_head2.Nullable = true;
			this.txt_head2.NullToolTipText = "این قسمت نمیتواند خالی باشد";
			this.txt_head2.ShortcutsEnabled = false;
			Control arg_552_0 = this.txt_head2;
			size = new Size(573, 36);
			arg_552_0.Size = size;
			this.txt_head2.TabIndex = 2;
			this.txt_head2.VisualStyle = Janus.Windows.GridEX.VisualStyle.Office2010;
			this.txt_head1.AcceptEnter = true;
			this.txt_head1.AllowEdit = true;
			this.txt_head1.AllowNew = true;
			this.txt_head1.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.txt_head1.FocusColor = true;
			this.txt_head1.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_5EC_0 = this.txt_head1;
			location = new Point(16, 135);
			arg_5EC_0.Location = location;
			this.txt_head1.Name = "txt_head1";
			this.txt_head1.Nullable = true;
			this.txt_head1.NullToolTipText = "این قسمت نمیتواند خالی باشد";
			this.txt_head1.ShortcutsEnabled = false;
			Control arg_644_0 = this.txt_head1;
			size = new Size(573, 36);
			arg_644_0.Size = size;
			this.txt_head1.TabIndex = 1;
			this.txt_head1.VisualStyle = Janus.Windows.GridEX.VisualStyle.Office2010;
			this.txt_company.AcceptEnter = true;
			this.txt_company.AllowEdit = true;
			this.txt_company.AllowNew = true;
			this.txt_company.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.txt_company.FocusColor = true;
			this.txt_company.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_6DE_0 = this.txt_company;
			location = new Point(94, 320);
			arg_6DE_0.Location = location;
			this.txt_company.Name = "txt_company";
			this.txt_company.Nullable = true;
			this.txt_company.NullToolTipText = "این قسمت نمیتواند خالی باشد";
			this.txt_company.ShortcutsEnabled = false;
			Control arg_733_0 = this.txt_company;
			size = new Size(52, 36);
			arg_733_0.Size = size;
			this.txt_company.TabIndex = 1;
			this.txt_company.Visible = false;
			this.txt_company.VisualStyle = Janus.Windows.GridEX.VisualStyle.Office2010;
			this.UiGroupBox4.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.UiGroupBox4.BackgroundStyle = BackgroundStyle.Panel;
			this.UiGroupBox4.FrameStyle = Janus.Windows.EditControls.FrameStyle.Top;
			Control arg_79B_0 = this.UiGroupBox4;
			location = new Point(16, 107);
			arg_79B_0.Location = location;
			this.UiGroupBox4.Name = "UiGroupBox4";
			Control arg_7C8_0 = this.UiGroupBox4;
			size = new Size(704, 22);
			arg_7C8_0.Size = size;
			this.UiGroupBox4.TabIndex = 26;
			this.UiGroupBox4.Text = "اطلاعات سربرگ";
			this.UiGroupBox4.VisualStyle = PanelVisualStyle.Office2010;
			this.Label8.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.Label8.AutoSize = true;
			this.Label8.BackColor = Color.Transparent;
			this.Label8.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_861_0 = this.Label8;
			location = new Point(591, 207);
			arg_861_0.Location = location;
			this.Label8.Name = "Label8";
			Control arg_88E_0 = this.Label8;
			size = new Size(150, 28);
			arg_88E_0.Size = size;
			this.Label8.TabIndex = 23;
			this.Label8.Text = "متن سربرگ سطر دوم";
			this.Label7.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.Label7.AutoSize = true;
			this.Label7.BackColor = Color.Transparent;
			this.Label7.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_91A_0 = this.Label7;
			location = new Point(591, 140);
			arg_91A_0.Location = location;
			this.Label7.Name = "Label7";
			Control arg_947_0 = this.Label7;
			size = new Size(148, 28);
			arg_947_0.Size = size;
			this.Label7.TabIndex = 24;
			this.Label7.Text = "متن سربرگ سطر اول";
			this.Label3.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.Label3.AutoSize = true;
			this.Label3.BackColor = Color.Transparent;
			this.Label3.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_9D3_0 = this.Label3;
			location = new Point(148, 325);
			arg_9D3_0.Location = location;
			this.Label3.Name = "Label3";
			Control arg_A00_0 = this.Label3;
			size = new Size(146, 28);
			arg_A00_0.Size = size;
			this.Label3.TabIndex = 25;
			this.Label3.Text = "عنوان مالک نرم افزار";
			this.Label3.Visible = false;
			this.UiButton2.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.UiButton2.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_A7B_0 = this.UiButton2;
			location = new Point(341, 284);
			arg_A7B_0.Location = location;
			this.UiButton2.Name = "UiButton2";
			this.UiButton2.OfficeColorScheme = Janus.Windows.UI.OfficeColorScheme.Custom;
			this.UiButton2.OfficeCustomColor = Color.SteelBlue;
			Control arg_AC3_0 = this.UiButton2;
			size = new Size(115, 38);
			arg_AC3_0.Size = size;
			this.UiButton2.TabIndex = 9;
			this.UiButton2.TabStop = false;
			this.UiButton2.Text = "خروج";
			this.UiButton2.VisualStyle = Janus.Windows.UI.VisualStyle.Office2010;
			this.UiButton1.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.UiButton1.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			this.UiButton1.Image = Resources.accept;
			Control arg_B5C_0 = this.UiButton1;
			location = new Point(462, 284);
			arg_B5C_0.Location = location;
			this.UiButton1.Name = "UiButton1";
			this.UiButton1.OfficeColorScheme = Janus.Windows.UI.OfficeColorScheme.Custom;
			this.UiButton1.OfficeCustomColor = Color.SteelBlue;
			Control arg_BA7_0 = this.UiButton1;
			size = new Size(128, 38);
			arg_BA7_0.Size = size;
			this.UiButton1.TabIndex = 3;
			this.UiButton1.Text = "ثبت";
			this.UiButton1.VisualStyle = Janus.Windows.UI.VisualStyle.Office2010;
			this.EditBox1.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.EditBox1.ButtonFont = new Font("Courier New", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 178);
			this.EditBox1.Font = new Font("Courier New", 18f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_C3D_0 = this.EditBox1;
			location = new Point(16, 27);
			arg_C3D_0.Location = location;
			this.EditBox1.Name = "EditBox1";
			this.EditBox1.RightToLeft = RightToLeft.No;
			Control arg_C77_0 = this.EditBox1;
			size = new Size(573, 35);
			arg_C77_0.Size = size;
			this.EditBox1.TabIndex = 0;
			this.EditBox1.TabStop = false;
			this.EditBox1.VisualStyle = Janus.Windows.GridEX.VisualStyle.Office2010;
			this.EditBox2.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.EditBox2.CharacterCasing = CharacterCasing.Upper;
			this.EditBox2.Font = new Font("Courier New", 18f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_CF4_0 = this.EditBox2;
			location = new Point(16, 61);
			arg_CF4_0.Location = location;
			this.EditBox2.MaxLength = 39;
			this.EditBox2.Name = "EditBox2";
			this.EditBox2.RightToLeft = RightToLeft.No;
			Control arg_D3C_0 = this.EditBox2;
			size = new Size(573, 35);
			arg_D3C_0.Size = size;
			this.EditBox2.TabIndex = 0;
			this.EditBox2.VisualStyle = Janus.Windows.GridEX.VisualStyle.Office2010;
			this.Label2.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.Label2.AutoSize = true;
			this.Label2.BackColor = Color.Transparent;
			this.Label2.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_DC0_0 = this.Label2;
			location = new Point(591, 65);
			arg_DC0_0.Location = location;
			this.Label2.Name = "Label2";
			Control arg_DED_0 = this.Label2;
			size = new Size(129, 28);
			arg_DED_0.Size = size;
			this.Label2.TabIndex = 1;
			this.Label2.Text = "سریال فعال سازی";
			this.Label1.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.Label1.AutoSize = true;
			this.Label1.BackColor = Color.Transparent;
			this.Label1.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_E75_0 = this.Label1;
			location = new Point(591, 32);
			arg_E75_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_E9F_0 = this.Label1;
			size = new Size(79, 28);
			arg_E9F_0.Size = size;
			this.Label1.TabIndex = 1;
			this.Label1.Text = "کد سیستم";
			SizeF autoScaleDimensions = new SizeF(9f, 19f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			size = new Size(761, 355);
			this.ClientSize = size;
			this.Controls.Add(this.UiGroupBox1);
			this.Font = new Font("Tahoma", 12f, FontStyle.Regular, GraphicsUnit.Point, 178);
			this.FormBorderStyle = FormBorderStyle.FixedSingle;
			this.KeyPreview = true;
			Padding margin = new Padding(4);
			this.Margin = margin;
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "Frm_Register";
			this.RightToLeft = RightToLeft.Yes;
			this.ShowInTaskbar = false;
			this.StartPosition = FormStartPosition.CenterScreen;
			((ISupportInitialize)this.UiGroupBox1).EndInit();
			this.UiGroupBox1.ResumeLayout(false);
			((ISupportInitialize)this.UiGroupBox2).EndInit();
			this.UiGroupBox2.ResumeLayout(false);
			this.UiGroupBox2.PerformLayout();
			((ISupportInitialize)this.UiGroupBox4).EndInit();
			this.ResumeLayout(false);
		}

		// Token: 0x170002C8 RID: 712
		// (get) Token: 0x06000947 RID: 2375 RVA: 0x00186F58 File Offset: 0x00185358
		// (set) Token: 0x06000948 RID: 2376 RVA: 0x00186F70 File Offset: 0x00185370
		internal virtual UIGroupBox UiGroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UiGroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._UiGroupBox1 = value;
			}
		}

		// Token: 0x170002C9 RID: 713
		// (get) Token: 0x06000949 RID: 2377 RVA: 0x00186F7C File Offset: 0x0018537C
		// (set) Token: 0x0600094A RID: 2378 RVA: 0x00186F94 File Offset: 0x00185394
		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		// Token: 0x170002CA RID: 714
		// (get) Token: 0x0600094B RID: 2379 RVA: 0x00186FA0 File Offset: 0x001853A0
		// (set) Token: 0x0600094C RID: 2380 RVA: 0x00186FB8 File Offset: 0x001853B8
		internal virtual Label Label2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label2 = value;
			}
		}

		// Token: 0x170002CB RID: 715
		// (get) Token: 0x0600094D RID: 2381 RVA: 0x00186FC4 File Offset: 0x001853C4
		// (set) Token: 0x0600094E RID: 2382 RVA: 0x00186FDC File Offset: 0x001853DC
		internal virtual EditBox EditBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._EditBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.EditBox2_Leave);
				EventHandler value3 = new EventHandler(this.EditBox2_Enter);
				bool flag = this._EditBox2 != null;
				if (flag)
				{
					this._EditBox2.Leave -= value2;
					this._EditBox2.Enter -= value3;
				}
				this._EditBox2 = value;
				flag = (this._EditBox2 != null);
				if (flag)
				{
					this._EditBox2.Leave += value2;
					this._EditBox2.Enter += value3;
				}
			}
		}

		// Token: 0x170002CC RID: 716
		// (get) Token: 0x0600094F RID: 2383 RVA: 0x00187064 File Offset: 0x00185464
		// (set) Token: 0x06000950 RID: 2384 RVA: 0x0018707C File Offset: 0x0018547C
		internal virtual UIButton UiButton2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UiButton2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.UiButton2_Click);
				bool flag = this._UiButton2 != null;
				if (flag)
				{
					this._UiButton2.Click -= value2;
				}
				this._UiButton2 = value;
				flag = (this._UiButton2 != null);
				if (flag)
				{
					this._UiButton2.Click += value2;
				}
			}
		}

		// Token: 0x170002CD RID: 717
		// (get) Token: 0x06000951 RID: 2385 RVA: 0x001870DC File Offset: 0x001854DC
		// (set) Token: 0x06000952 RID: 2386 RVA: 0x001870F4 File Offset: 0x001854F4
		internal virtual UIButton UiButton1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UiButton1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.UiButton1_Click);
				bool flag = this._UiButton1 != null;
				if (flag)
				{
					this._UiButton1.Click -= value2;
				}
				this._UiButton1 = value;
				flag = (this._UiButton1 != null);
				if (flag)
				{
					this._UiButton1.Click += value2;
				}
			}
		}

		// Token: 0x170002CE RID: 718
		// (get) Token: 0x06000953 RID: 2387 RVA: 0x00187154 File Offset: 0x00185554
		// (set) Token: 0x06000954 RID: 2388 RVA: 0x0018716C File Offset: 0x0018556C
		internal virtual UIGroupBox UiGroupBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UiGroupBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._UiGroupBox2 = value;
			}
		}

		// Token: 0x170002CF RID: 719
		// (get) Token: 0x06000955 RID: 2389 RVA: 0x00187178 File Offset: 0x00185578
		// (set) Token: 0x06000956 RID: 2390 RVA: 0x00187190 File Offset: 0x00185590
		internal virtual EditBox EditBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._EditBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._EditBox1 = value;
			}
		}

		// Token: 0x170002D0 RID: 720
		// (get) Token: 0x06000957 RID: 2391 RVA: 0x0018719C File Offset: 0x0018559C
		// (set) Token: 0x06000958 RID: 2392 RVA: 0x001871B4 File Offset: 0x001855B4
		internal virtual EditBox txt_head2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._txt_head2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._txt_head2 = value;
			}
		}

		// Token: 0x170002D1 RID: 721
		// (get) Token: 0x06000959 RID: 2393 RVA: 0x001871C0 File Offset: 0x001855C0
		// (set) Token: 0x0600095A RID: 2394 RVA: 0x001871D8 File Offset: 0x001855D8
		internal virtual EditBox txt_head1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._txt_head1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._txt_head1 = value;
			}
		}

		// Token: 0x170002D2 RID: 722
		// (get) Token: 0x0600095B RID: 2395 RVA: 0x001871E4 File Offset: 0x001855E4
		// (set) Token: 0x0600095C RID: 2396 RVA: 0x001871FC File Offset: 0x001855FC
		internal virtual EditBox txt_company
		{
			[DebuggerNonUserCode]
			get
			{
				return this._txt_company;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._txt_company = value;
			}
		}

		// Token: 0x170002D3 RID: 723
		// (get) Token: 0x0600095D RID: 2397 RVA: 0x00187208 File Offset: 0x00185608
		// (set) Token: 0x0600095E RID: 2398 RVA: 0x00187220 File Offset: 0x00185620
		internal virtual UIGroupBox UiGroupBox4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UiGroupBox4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._UiGroupBox4 = value;
			}
		}

		// Token: 0x170002D4 RID: 724
		// (get) Token: 0x0600095F RID: 2399 RVA: 0x0018722C File Offset: 0x0018562C
		// (set) Token: 0x06000960 RID: 2400 RVA: 0x00187244 File Offset: 0x00185644
		internal virtual Label Label8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label8 = value;
			}
		}

		// Token: 0x170002D5 RID: 725
		// (get) Token: 0x06000961 RID: 2401 RVA: 0x00187250 File Offset: 0x00185650
		// (set) Token: 0x06000962 RID: 2402 RVA: 0x00187268 File Offset: 0x00185668
		internal virtual Label Label7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label7 = value;
			}
		}

		// Token: 0x170002D6 RID: 726
		// (get) Token: 0x06000963 RID: 2403 RVA: 0x00187274 File Offset: 0x00185674
		// (set) Token: 0x06000964 RID: 2404 RVA: 0x0018728C File Offset: 0x0018568C
		internal virtual Label Label3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label3 = value;
			}
		}

		// Token: 0x170002D7 RID: 727
		// (get) Token: 0x06000965 RID: 2405 RVA: 0x00187298 File Offset: 0x00185698
		// (set) Token: 0x06000966 RID: 2406 RVA: 0x001872B0 File Offset: 0x001856B0
		internal virtual Label lbl_head2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._lbl_head2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._lbl_head2 = value;
			}
		}

		// Token: 0x170002D8 RID: 728
		// (get) Token: 0x06000967 RID: 2407 RVA: 0x001872BC File Offset: 0x001856BC
		// (set) Token: 0x06000968 RID: 2408 RVA: 0x001872D4 File Offset: 0x001856D4
		internal virtual Label lbl_head1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._lbl_head1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._lbl_head1 = value;
			}
		}

		// Token: 0x06000969 RID: 2409 RVA: 0x001872E0 File Offset: 0x001856E0
		[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
		private void UiButton2_Click(object sender, EventArgs e)
		{
			ProjectData.EndApp();
		}

		// Token: 0x0600096A RID: 2410 RVA: 0x001872EC File Offset: 0x001856EC
		private void Frm_Register_Load(object sender, EventArgs e)
		{
			this.EditBox1.Text = this.fp.Value();
			Clipboard.SetText(this.EditBox1.Text);
			string text = Conversions.ToString(Public_Function.ExecuteScalar("select value from setting where [key]=" + Public_Function.GetValue("head1")));
			bool flag = text != null && Operators.CompareString(text, "نسخه نمایشی", false) != 0 && Operators.CompareString(text, "", false) != 0;
			if (flag)
			{
				this.txt_head1.Visible = false;
				this.Label7.Visible = false;
				this.lbl_head1.Visible = false;
			}
			string text2 = Conversions.ToString(Public_Function.ExecuteScalar("select value from setting where [key]=" + Public_Function.GetValue("head2")));
			flag = (text2 != null && Operators.CompareString(text2, "نسخه نمایشی", false) != 0 && Operators.CompareString(text2, "", false) != 0);
			if (flag)
			{
				this.txt_head2.Visible = false;
				this.Label8.Visible = false;
				this.lbl_head2.Visible = false;
			}
			flag = (!this.txt_head1.Visible && !this.txt_head2.Visible);
			if (flag)
			{
				this.UiGroupBox4.Visible = false;
			}
		}

		// Token: 0x0600096B RID: 2411 RVA: 0x00187438 File Offset: 0x00185838
		[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
		private void UiButton1_Click(object sender, EventArgs e)
		{
			bool flag = this.txt_head1.Visible;
			bool flag2;
			if (flag)
			{
				flag2 = (Operators.CompareString(this.txt_head1.Text, string.Empty, false) == 0);
				if (flag2)
				{
					this.txt_head1.ShowTip("سربرگ را وارد نمایید");
					return;
				}
			}
			flag2 = this.txt_head2.Visible;
			if (flag2)
			{
				flag = (Operators.CompareString(this.txt_head2.Text, string.Empty, false) == 0);
				if (flag)
				{
					this.txt_head2.ShowTip("سربرگ را وارد نمایید");
					return;
				}
			}
			string text = this.EditBox2.Text.ToUpper();
			text = text.Replace("_", "-");
			flag2 = (Operators.CompareString(text, this.fp.Value2(this.EditBox1.Text), false) == 0);
			if (flag2)
			{
				flag = (Public_Function.AppType == 1 | Public_Function.AppType == 3);
				if (flag)
				{
					try
					{
						File.WriteAllText(Application.StartupPath + "\\fr.snk", text);
					}
					catch (Exception expr_10E)
					{
						ProjectData.SetProjectError(expr_10E);
						Frm_RegHelp frm_RegHelp = new Frm_RegHelp();
						frm_RegHelp.ShowDialog();
						ProjectData.ClearProjectError();
					}
				}
				else
				{
					File.WriteAllText(Application.StartupPath + "\\fr2.snk", text);
				}
				try
				{
					setting setting = new setting();
					flag2 = this.txt_head1.Visible;
					if (flag2)
					{
						setting.Update("head1", this.txt_head1.Text);
					}
					flag2 = this.txt_head2.Visible;
					if (flag2)
					{
						setting.Update("head2", this.txt_head2.Text);
					}
					flag2 = this.txt_head1.Visible;
					if (flag2)
					{
						setting.Update("owner", this.txt_head1.Text);
					}
					ProjectData.EndApp();
				}
				catch (Exception expr_1CF)
				{
					ProjectData.SetProjectError(expr_1CF);
					ProjectData.ClearProjectError();
				}
			}
			else
			{
				Public_Function.ShowMessage("سریال فعال سازی اشتباه می باشد", MessageBoxButtons.OK, MessageBoxIcon.Hand, null);
				this.EditBox2.Focus();
			}
		}

		// Token: 0x0600096C RID: 2412 RVA: 0x00187664 File Offset: 0x00185A64
		private void EditBox2_Enter(object sender, EventArgs e)
		{
			Public_Function.SetEnglish();
		}

		// Token: 0x0600096D RID: 2413 RVA: 0x00187670 File Offset: 0x00185A70
		private void EditBox2_Leave(object sender, EventArgs e)
		{
			Public_Function.SetFarsi();
		}

		// Token: 0x040003A4 RID: 932
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		// Token: 0x040003A5 RID: 933
		private IContainer components;

		// Token: 0x040003A6 RID: 934
		[AccessedThroughProperty("UiGroupBox1")]
		private UIGroupBox _UiGroupBox1;

		// Token: 0x040003A7 RID: 935
		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		// Token: 0x040003A8 RID: 936
		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		// Token: 0x040003A9 RID: 937
		[AccessedThroughProperty("EditBox2")]
		private EditBox _EditBox2;

		// Token: 0x040003AA RID: 938
		[AccessedThroughProperty("UiButton2")]
		private UIButton _UiButton2;

		// Token: 0x040003AB RID: 939
		[AccessedThroughProperty("UiButton1")]
		private UIButton _UiButton1;

		// Token: 0x040003AC RID: 940
		[AccessedThroughProperty("UiGroupBox2")]
		private UIGroupBox _UiGroupBox2;

		// Token: 0x040003AD RID: 941
		[AccessedThroughProperty("EditBox1")]
		private EditBox _EditBox1;

		// Token: 0x040003AE RID: 942
		[AccessedThroughProperty("txt_head2")]
		private EditBox _txt_head2;

		// Token: 0x040003AF RID: 943
		[AccessedThroughProperty("txt_head1")]
		private EditBox _txt_head1;

		// Token: 0x040003B0 RID: 944
		[AccessedThroughProperty("txt_company")]
		private EditBox _txt_company;

		// Token: 0x040003B1 RID: 945
		[AccessedThroughProperty("UiGroupBox4")]
		private UIGroupBox _UiGroupBox4;

		// Token: 0x040003B2 RID: 946
		[AccessedThroughProperty("Label8")]
		private Label _Label8;

		// Token: 0x040003B3 RID: 947
		[AccessedThroughProperty("Label7")]
		private Label _Label7;

		// Token: 0x040003B4 RID: 948
		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		// Token: 0x040003B5 RID: 949
		[AccessedThroughProperty("lbl_head2")]
		private Label _lbl_head2;

		// Token: 0x040003B6 RID: 950
		[AccessedThroughProperty("lbl_head1")]
		private Label _lbl_head1;

		// Token: 0x040003B7 RID: 951
		private fp fp;
	}
}
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using DevComponents.DotNetBar;
using DevComponents.DotNetBar.Controls;
using Microsoft.VisualBasic.CompilerServices;

namespace FruitBox
{
	// Token: 0x02000077 RID: 119
	[DesignerGenerated]
	public class Frm_Restore : Form
	{
		// Token: 0x060009AD RID: 2477 RVA: 0x00189390 File Offset: 0x00187790
		[DebuggerNonUserCode]
		public Frm_Restore()
		{
			Frm_Restore.__ENCAddToList(this);
			this.InitializeComponent();
		}

		// Token: 0x060009AE RID: 2478 RVA: 0x001893A8 File Offset: 0x001877A8
		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Restore.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Restore.__ENCList.Count == Frm_Restore.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Restore.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Restore.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Restore.__ENCList[num] = Frm_Restore.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Restore.__ENCList.RemoveRange(num, Frm_Restore.__ENCList.Count - num);
						Frm_Restore.__ENCList.Capacity = Frm_Restore.__ENCList.Count;
					}
					Frm_Restore.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		// Token: 0x060009AF RID: 2479 RVA: 0x001894AC File Offset: 0x001878AC
		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		// Token: 0x060009B0 RID: 2480 RVA: 0x001894FC File Offset: 0x001878FC
		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			this.PanelEx2 = new PanelEx();
			this.PictureBox1 = new PictureBox();
			this.CircularProgress1 = new CircularProgress();
			this.Label2 = new Label();
			this.Label1 = new Label();
			this.Timer1 = new Timer(this.components);
			this.Timer2 = new Timer(this.components);
			this.PanelEx2.SuspendLayout();
			((ISupportInitialize)this.PictureBox1).BeginInit();
			this.SuspendLayout();
			this.PanelEx2.CanvasColor = SystemColors.Control;
			this.PanelEx2.ColorSchemeStyle = eDotNetBarStyle.OfficeXP;
			this.PanelEx2.Controls.Add(this.PictureBox1);
			this.PanelEx2.Controls.Add(this.CircularProgress1);
			this.PanelEx2.Controls.Add(this.Label2);
			this.PanelEx2.Controls.Add(this.Label1);
			this.PanelEx2.DisabledBackColor = Color.Empty;
			this.PanelEx2.Dock = DockStyle.Fill;
			Control arg_134_0 = this.PanelEx2;
			Point location = new Point(0, 0);
			arg_134_0.Location = location;
			this.PanelEx2.Name = "PanelEx2";
			Control arg_165_0 = this.PanelEx2;
			Size size = new Size(415, 262);
			arg_165_0.Size = size;
			this.PanelEx2.Style.Alignment = StringAlignment.Center;
			this.PanelEx2.Style.BackColor1.Color = Color.White;
			this.PanelEx2.Style.BackColor2.Color = Color.White;
			this.PanelEx2.Style.Border = eBorderType.DoubleLine;
			this.PanelEx2.Style.BorderColor.Color = Color.FromArgb(132, 157, 189);
			this.PanelEx2.Style.ForeColor.ColorSchemePart = eColorSchemePart.PanelText;
			this.PanelEx2.Style.GradientAngle = 90;
			this.PanelEx2.TabIndex = 2;
			this.PanelEx2.Text = "PanelEx2";
			Control arg_24B_0 = this.PictureBox1;
			location = new Point(12, 12);
			arg_24B_0.Location = location;
			this.PictureBox1.Name = "PictureBox1";
			Control arg_27C_0 = this.PictureBox1;
			size = new Size(146, 144);
			arg_27C_0.Size = size;
			this.PictureBox1.TabIndex = 2;
			this.PictureBox1.TabStop = false;
			this.CircularProgress1.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.CircularProgress1.BackgroundStyle.CornerType = eCornerType.Square;
			this.CircularProgress1.FocusCuesEnabled = false;
			Control arg_2DC_0 = this.CircularProgress1;
			location = new Point(105, 86);
			arg_2DC_0.Location = location;
			this.CircularProgress1.Name = "CircularProgress1";
			this.CircularProgress1.ProgressBarType = eCircularProgressType.Pie;
			Control arg_31A_0 = this.CircularProgress1;
			size = new Size(306, 156);
			arg_31A_0.Size = size;
			this.CircularProgress1.Style = eDotNetBarStyle.OfficeXP;
			this.CircularProgress1.TabIndex = 1;
			this.Label2.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.Label2.AutoSize = true;
			this.Label2.Font = new Font("Tahoma", 11f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_38D_0 = this.Label2;
			location = new Point(230, 65);
			arg_38D_0.Location = location;
			this.Label2.Name = "Label2";
			Control arg_3BB_0 = this.Label2;
			size = new Size(150, 18);
			arg_3BB_0.Size = size;
			this.Label2.TabIndex = 0;
			this.Label2.Text = "... لطفا شکیبا باشید";
			this.Label1.Anchor = (AnchorStyles.Top | AnchorStyles.Right);
			this.Label1.AutoSize = true;
			this.Label1.Font = new Font("Tahoma", 11f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_432_0 = this.Label1;
			location = new Point(194, 30);
			arg_432_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_460_0 = this.Label1;
			size = new Size(186, 18);
			arg_460_0.Size = size;
			this.Label1.TabIndex = 0;
			this.Label1.Text = "... در حال بازیابی اطلاعات";
			this.Timer1.Enabled = true;
			this.Timer1.Interval = 1000;
			this.Timer2.Enabled = true;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.White;
			size = new Size(415, 262);
			this.ClientSize = size;
			this.Controls.Add(this.PanelEx2);
			this.FormBorderStyle = FormBorderStyle.None;
			this.Name = "Frm_Restore";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "تهیه پشتیبان";
			this.PanelEx2.ResumeLayout(false);
			this.PanelEx2.PerformLayout();
			((ISupportInitialize)this.PictureBox1).EndInit();
			this.ResumeLayout(false);
		}

		// Token: 0x170002F2 RID: 754
		// (get) Token: 0x060009B1 RID: 2481 RVA: 0x00189A6C File Offset: 0x00187E6C
		// (set) Token: 0x060009B2 RID: 2482 RVA: 0x00189A84 File Offset: 0x00187E84
		internal virtual PanelEx PanelEx2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PanelEx2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PanelEx2 = value;
			}
		}

		// Token: 0x170002F3 RID: 755
		// (get) Token: 0x060009B3 RID: 2483 RVA: 0x00189A90 File Offset: 0x00187E90
		// (set) Token: 0x060009B4 RID: 2484 RVA: 0x00189AA8 File Offset: 0x00187EA8
		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		// Token: 0x170002F4 RID: 756
		// (get) Token: 0x060009B5 RID: 2485 RVA: 0x00189AB4 File Offset: 0x00187EB4
		// (set) Token: 0x060009B6 RID: 2486 RVA: 0x00189ACC File Offset: 0x00187ECC
		internal virtual Label Label2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label2 = value;
			}
		}

		// Token: 0x170002F5 RID: 757
		// (get) Token: 0x060009B7 RID: 2487 RVA: 0x00189AD8 File Offset: 0x00187ED8
		// (set) Token: 0x060009B8 RID: 2488 RVA: 0x00189AF0 File Offset: 0x00187EF0
		internal virtual CircularProgress CircularProgress1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CircularProgress1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CircularProgress1 = value;
			}
		}

		// Token: 0x170002F6 RID: 758
		// (get) Token: 0x060009B9 RID: 2489 RVA: 0x00189AFC File Offset: 0x00187EFC
		// (set) Token: 0x060009BA RID: 2490 RVA: 0x00189B14 File Offset: 0x00187F14
		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		// Token: 0x170002F7 RID: 759
		// (get) Token: 0x060009BB RID: 2491 RVA: 0x00189B74 File Offset: 0x00187F74
		// (set) Token: 0x060009BC RID: 2492 RVA: 0x00189B8C File Offset: 0x00187F8C
		internal virtual Timer Timer2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer2_Tick);
				bool flag = this._Timer2 != null;
				if (flag)
				{
					this._Timer2.Tick -= value2;
				}
				this._Timer2 = value;
				flag = (this._Timer2 != null);
				if (flag)
				{
					this._Timer2.Tick += value2;
				}
			}
		}

		// Token: 0x170002F8 RID: 760
		// (get) Token: 0x060009BD RID: 2493 RVA: 0x00189BEC File Offset: 0x00187FEC
		// (set) Token: 0x060009BE RID: 2494 RVA: 0x00189C04 File Offset: 0x00188004
		internal virtual PictureBox PictureBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox1 = value;
			}
		}

		// Token: 0x170002F9 RID: 761
		// (get) Token: 0x060009BF RID: 2495 RVA: 0x00189C10 File Offset: 0x00188010
		// (set) Token: 0x060009C0 RID: 2496 RVA: 0x00189C28 File Offset: 0x00188028
		public string Path
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Path;
			}
			[DebuggerNonUserCode]
			set
			{
				this._Path = value;
			}
		}

		// Token: 0x060009C1 RID: 2497 RVA: 0x00189C34 File Offset: 0x00188034
		private void RestoreBackup(string OldDBName, string fileName)
		{
			string mConnection = string.Format("Provider=SQLOLEDB.1;Data Source=" + Public_Function.Server + Public_Function.SQLInstance + ";Initial Catalog=master;Persist Security Info=True;User ID=sa;password=1;Connect Timeout=10000", new object[0]);
			Public_Function.ExecuteNonQuery(string.Concat(new string[]
			{
				"declare @cmd varchar(20);declare @spid varchar(4);declare cur cursor for select cast(spid as varchar(4)) from master.dbo.sysprocesses  where dbid=db_id(" + Public_Function.GetValue(OldDBName) + ") open cur  fetch next from cur into @spid while @@fetch_status=0 begin  set @cmd='kill ' + @spid exec (@cmd)  fetch next from cur into @spid  end  close cur deallocate cur USE Master RESTORE DATABASE ",
				OldDBName,
				" FROM  DISK = N'",
				fileName,
				"' WITH  FILE = 1,   NOUNLOAD,  REPLACE,  STATS = 10"
			}), mConnection);
			Public_Function.Connection = new SqlConnection(string.Concat(new string[]
			{
				"Data Source=",
				Public_Function.Server,
				Public_Function.SQLInstance,
				";Initial Catalog=",
				OldDBName,
				";Persist Security Info=True;User ID=sa;Password=1"
			}));
			Public_Function.Connection.Open();
			Public_Function.dict.Clear();
			Public_Function.LoadApplicationSetting();
		}

		// Token: 0x060009C2 RID: 2498 RVA: 0x00189D18 File Offset: 0x00188118
		private void Timer1_Tick(object sender, EventArgs e)
		{
			this.Timer1.Enabled = false;
			this.RestoreBackup(Public_Function.dict["dbname"], this.Path);
			this.Timer2.Enabled = false;
			Public_Function.ShowMessage("بازیابی اطلاعات با موفقیت انجام شد", MessageBoxButtons.OK, MessageBoxIcon.Asterisk, null);
			this.Close();
		}

		// Token: 0x060009C3 RID: 2499 RVA: 0x00189D74 File Offset: 0x00188174
		private void Timer2_Tick(object sender, EventArgs e)
		{
			bool flag = this.CircularProgress1.Value == 100;
			if (flag)
			{
				this.CircularProgress1.Value = 0;
			}
			CircularProgress circularProgress = this.CircularProgress1;
			checked
			{
				circularProgress.Value += 10;
			}
		}

		// Token: 0x040003D5 RID: 981
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		// Token: 0x040003D6 RID: 982
		private IContainer components;

		// Token: 0x040003D7 RID: 983
		[AccessedThroughProperty("PanelEx2")]
		private PanelEx _PanelEx2;

		// Token: 0x040003D8 RID: 984
		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		// Token: 0x040003D9 RID: 985
		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		// Token: 0x040003DA RID: 986
		[AccessedThroughProperty("CircularProgress1")]
		private CircularProgress _CircularProgress1;

		// Token: 0x040003DB RID: 987
		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		// Token: 0x040003DC RID: 988
		[AccessedThroughProperty("Timer2")]
		private Timer _Timer2;

		// Token: 0x040003DD RID: 989
		[AccessedThroughProperty("PictureBox1")]
		private PictureBox _PictureBox1;

		// Token: 0x040003DE RID: 990
		[CompilerGenerated]
		private string _Path;
	}
}
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using FruitBox.My;
using FruitBox.My.Resources;
using Janus.Windows.Common;
using Janus.Windows.GridEX;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Stimulsoft.Base.Drawing;
using Stimulsoft.Report;
using Stimulsoft.Report.Components;

namespace FruitBox
{
	// Token: 0x0200008A RID: 138
	[StandardModule]
	internal sealed class Public_Function
	{
		// Token: 0x06000C1C RID: 3100 RVA: 0x00143E9C File Offset: 0x0014229C
		static Public_Function()
		{
			// Note: this type is marked as 'beforefieldinit'.
			CurrentData currentData = new CurrentData();
			Public_Function.CurrentData = currentData;
			Public_Function.dict = new Dictionary<string, string>();
			Public_Function.DayName = new string[]
			{
				"",
				"شنبه",
				"یکشنبه",
				"دوشنبه",
				"سه شنبه",
				"چهار شنبه",
				"پنجشنبه",
				"جمعه"
			};
			Public_Function.MonthName = new string[]
			{
				"",
				"فروردین",
				"اردیبهشت",
				"خرداد",
				"تیر",
				"مرداد",
				"شهریور",
				"مهر",
				"آبان",
				"آذر",
				"دی",
				"بهمن",
				"اسفند"
			};
			int appType = 1;
			Public_Function.AppType = appType;
		}

		// Token: 0x170003B3 RID: 947
		// (get) Token: 0x06000C1D RID: 3101 RVA: 0x00143FA8 File Offset: 0x001423A8
		// (set) Token: 0x06000C1E RID: 3102 RVA: 0x00143FC0 File Offset: 0x001423C0
		public static SqlConnection Connection
		{
			[DebuggerNonUserCode]
			get
			{
				return Public_Function._Connection;
			}
			[DebuggerNonUserCode]
			set
			{
				Public_Function._Connection = value;
			}
		}

		// Token: 0x170003B4 RID: 948
		// (get) Token: 0x06000C1F RID: 3103 RVA: 0x00143FCC File Offset: 0x001423CC
		// (set) Token: 0x06000C20 RID: 3104 RVA: 0x00143FE4 File Offset: 0x001423E4
		public static CurrentData CurrentData
		{
			[DebuggerNonUserCode]
			get
			{
				return Public_Function._CurrentData;
			}
			[DebuggerNonUserCode]
			set
			{
				Public_Function._CurrentData = value;
			}
		}

		// Token: 0x170003B5 RID: 949
		// (get) Token: 0x06000C21 RID: 3105 RVA: 0x00143FF0 File Offset: 0x001423F0
		// (set) Token: 0x06000C22 RID: 3106 RVA: 0x00144008 File Offset: 0x00142408
		public static string Server
		{
			[DebuggerNonUserCode]
			get
			{
				return Public_Function._Server;
			}
			[DebuggerNonUserCode]
			set
			{
				Public_Function._Server = value;
			}
		}

		// Token: 0x170003B6 RID: 950
		// (get) Token: 0x06000C23 RID: 3107 RVA: 0x00144014 File Offset: 0x00142414
		// (set) Token: 0x06000C24 RID: 3108 RVA: 0x0014402C File Offset: 0x0014242C
		public static string SQLInstance
		{
			[DebuggerNonUserCode]
			get
			{
				return Public_Function._SQLInstance;
			}
			[DebuggerNonUserCode]
			set
			{
				Public_Function._SQLInstance = value;
			}
		}

		// Token: 0x170003B7 RID: 951
		// (get) Token: 0x06000C25 RID: 3109 RVA: 0x00144038 File Offset: 0x00142438
		// (set) Token: 0x06000C26 RID: 3110 RVA: 0x00144050 File Offset: 0x00142450
		public static int AppType
		{
			[DebuggerNonUserCode]
			get
			{
				return Public_Function._AppType;
			}
			[DebuggerNonUserCode]
			set
			{
				Public_Function._AppType = value;
			}
		}

		// Token: 0x06000C27 RID: 3111 RVA: 0x0014405C File Offset: 0x0014245C
		public static string Startup_Path()
		{
			return Application.StartupPath;
		}

		// Token: 0x06000C28 RID: 3112 RVA: 0x00144074 File Offset: 0x00142474
		public static decimal GetDecimalValue(decimal d)
		{
			decimal d2 = decimal.Truncate(d);
			bool flag = decimal.Compare(decimal.Subtract(d, d2), decimal.Zero) > 0;
			decimal result;
			if (flag)
			{
				result = Conversions.ToDecimal(decimal.Parse(d.ToString()).ToString("G29"));
			}
			else
			{
				result = decimal.Truncate(d);
			}
			return result;
		}

		// Token: 0x06000C29 RID: 3113 RVA: 0x001440D0 File Offset: 0x001424D0
		public static void SetSti_text(StiReport report, string element, string text)
		{
			StiText stiText = (StiText)report.GetComponentByName(element);
			bool flag = stiText != null;
			if (flag)
			{
				stiText.Text = text;
			}
		}

		// Token: 0x06000C2A RID: 3114 RVA: 0x00144108 File Offset: 0x00142508
		public static void Sti_replace(StiReport report, string elements)
		{
			string[] array = elements.Split(new char[]
			{
				','
			});
			string[] array2 = array;
			checked
			{
				for (int i = 0; i < array2.Length; i++)
				{
					string componentName = array2[i];
					StiText stiText = (StiText)report.GetComponentByName(componentName);
					bool flag = stiText != null;
					if (flag)
					{
						stiText.Text = stiText.Text.ToString().Replace("ـ", "");
					}
				}
			}
		}

		// Token: 0x06000C2B RID: 3115 RVA: 0x00144190 File Offset: 0x00142590
		public static void setReportFontBold(StiReport report, string elements)
		{
			bool flag = Operators.CompareString(Public_Function.dict["printfont_number"], string.Empty, false) == 0;
			checked
			{
				if (!flag)
				{
					string[] array = elements.Split(new char[]
					{
						','
					});
					string[] array2 = Public_Function.dict["printfont_number"].ToString().Split(new char[]
					{
						';'
					});
					int style = 1;
					Font font = new Font(array2[0].ToString(), Conversions.ToSingle(array2[1]), (FontStyle)style, GraphicsUnit.Point);
					StiText stiText = new StiText();
					string[] array3 = array;
					for (int i = 0; i < array3.Length; i++)
					{
						string componentName = array3[i];
						stiText = (StiText)report.GetComponentByName(componentName);
						flag = (stiText != null);
						if (flag)
						{
							stiText.Font = font;
							stiText.ShrinkFontToFit = true;
						}
					}
				}
			}
		}

		// Token: 0x06000C2C RID: 3116 RVA: 0x0014427C File Offset: 0x0014267C
		public static void setReportFont(StiReport report, string elements)
		{
			bool flag = Operators.CompareString(Public_Function.dict["printfont_number"], string.Empty, false) == 0;
			checked
			{
				if (!flag)
				{
					try
					{
						string[] array = elements.Split(new char[]
						{
							','
						});
						string[] array2 = Public_Function.dict["printfont_number"].ToString().Split(new char[]
						{
							';'
						});
						string left = Public_Function.dict["gridfont"].ToString().Split(new char[]
						{
							';'
						})[2];
						flag = (Operators.CompareString(left, "regular", false) == 0);
						int style;
						if (flag)
						{
							style = 0;
						}
						else
						{
							flag = (Operators.CompareString(left, "bold", false) == 0);
							if (flag)
							{
								style = 1;
							}
							else
							{
								flag = (Operators.CompareString(left, "italic", false) == 0);
								if (flag)
								{
									style = 2;
								}
							}
						}
						Font font = new Font(array2[0].ToString(), Conversions.ToSingle(array2[1]), (FontStyle)style, GraphicsUnit.Point);
						StiText stiText = new StiText();
						string[] array3 = array;
						for (int i = 0; i < array3.Length; i++)
						{
							string componentName = array3[i];
							stiText = (StiText)report.GetComponentByName(componentName);
							flag = (stiText != null);
							if (flag)
							{
								stiText.Font = font;
								stiText.ShrinkFontToFit = true;
							}
						}
					}
					catch (Exception expr_162)
					{
						ProjectData.SetProjectError(expr_162);
						Public_Function.ShowMessage("فونت انتخاب شده برای چاپ متبر نمی باشد", MessageBoxButtons.OK, MessageBoxIcon.Hand, null);
						ProjectData.ClearProjectError();
					}
				}
			}
		}

		// Token: 0x06000C2D RID: 3117 RVA: 0x00144428 File Offset: 0x00142828
		public static void SetReport_MarginTop(StiReport report)
		{
			try
			{
				IEnumerator enumerator = report.Pages.GetEnumerator();
				while (enumerator.MoveNext())
				{
					StiPage stiPage = (StiPage)enumerator.Current;
					stiPage.Margins = new StiMargins(stiPage.Margins.Left, stiPage.Margins.Right, Conversions.ToDouble(Public_Function.dict["paper_margin_top"]), stiPage.Margins.Bottom);
				}
			}
			finally
			{
				IEnumerator enumerator;
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		// Token: 0x06000C2E RID: 3118 RVA: 0x001444D0 File Offset: 0x001428D0
		public static string BuildWhere(List<string> lst, Public_Function.OperandType First_op)
		{
			bool flag = lst.Count == 0;
			string result;
			if (flag)
			{
				result = string.Empty;
			}
			else
			{
				string text = string.Empty;
				switch (First_op)
				{
				case Public_Function.OperandType.where:
					text += " WHERE ";
					break;
				case Public_Function.OperandType.AND_:
					text += " AND ";
					break;
				case Public_Function.OperandType.OR_:
					text += " OR ";
					break;
				}
				try
				{
					List<string>.Enumerator enumerator = lst.GetEnumerator();
					while (enumerator.MoveNext())
					{
						string current = enumerator.Current;
						text = text + current + " AND ";
					}
				}
				finally
				{
					List<string>.Enumerator enumerator;
					((IDisposable)enumerator).Dispose();
				}
				text = Public_Function.RemoveLast(text, 5);
				result = text;
			}
			return result;
		}

		// Token: 0x06000C2F RID: 3119 RVA: 0x001445A4 File Offset: 0x001429A4
		public static string ReverseString(string s)
		{
			char[] array = s.ToCharArray();
			string text = string.Empty;
			checked
			{
				int num = array.Length - 1;
				while (true)
				{
					int arg_30_0 = num;
					int num2 = 0;
					if (arg_30_0 < num2)
					{
						break;
					}
					text += Conversions.ToString(array[num]);
					num += -1;
				}
				return text;
			}
		}

		// Token: 0x06000C30 RID: 3120 RVA: 0x001445E8 File Offset: 0x001429E8
		public static void RenderDigitToPdf(DataTable dt)
		{
			char[] array = Conversions.ToCharArrayRankOne(string.Empty);
			string text = string.Empty;
			string text2 = string.Empty;
			checked
			{
				try
				{
					IEnumerator enumerator = dt.Rows.GetEnumerator();
					while (enumerator.MoveNext())
					{
						DataRow dataRow = (DataRow)enumerator.Current;
						array = dataRow["tozih"].ToString().ToCharArray();
						text2 = dataRow["tozih"].ToString();
						int num = 0;
						bool flag = false;
						int num2 = 0;
						text = string.Empty;
						char[] array2 = array;
						for (int i = 0; i < array2.Length; i++)
						{
							char c = array2[i];
							bool flag2 = (char.IsNumber(c) | Operators.CompareString(Conversions.ToString(c), "/", false) == 0 | Operators.CompareString(Conversions.ToString(c), ",", false) == 0) & !flag;
							if (flag2)
							{
								num = num2;
								flag = true;
							}
							flag2 = (flag && (!char.IsNumber(c) & Operators.CompareString(Conversions.ToString(c), "/", false) != 0 & Operators.CompareString(Conversions.ToString(c), ",", false) != 0));
							if (flag2)
							{
								text = text2.Substring(num, num2 - num);
								dataRow["tozih"] = dataRow["tozih"].ToString().Replace(text, Public_Function.ReverseString(text));
								flag = false;
							}
							num2++;
							flag2 = (num2 == text2.Length && flag);
							if (flag2)
							{
								text = text2.Substring(num, num2 - num);
								dataRow["tozih"] = dataRow["tozih"].ToString().Replace(text, Public_Function.ReverseString(text));
								flag = false;
							}
						}
					}
				}
				finally
				{
					IEnumerator enumerator;
					bool flag2 = enumerator is IDisposable;
					if (flag2)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
		}

		// Token: 0x06000C31 RID: 3121 RVA: 0x0014480C File Offset: 0x00142C0C
		public static string RenderDigitToPdf(string str)
		{
			str = Public_Function.ToFarsi(str);
			char[] array = Conversions.ToCharArrayRankOne(string.Empty);
			string text = string.Empty;
			array = str.ToString().ToCharArray();
			int num = 0;
			bool flag = false;
			int num2 = 0;
			text = string.Empty;
			char[] array2 = array;
			checked
			{
				for (int i = 0; i < array2.Length; i++)
				{
					char c = array2[i];
					bool flag2 = (char.IsNumber(c) | Operators.CompareString(Conversions.ToString(c), "/", false) == 0 | Operators.CompareString(Conversions.ToString(c), ",", false) == 0) & !flag;
					if (flag2)
					{
						num = num2;
						flag = true;
					}
					flag2 = (flag && (!char.IsNumber(c) & Operators.CompareString(Conversions.ToString(c), "/", false) != 0 & Operators.CompareString(Conversions.ToString(c), ",", false) != 0));
					if (flag2)
					{
						text = str.Substring(num, num2 - num);
						str = str.Replace(text, Public_Function.ReverseString(text));
						flag = false;
					}
					num2++;
					flag2 = (num2 == str.Length && flag);
					if (flag2)
					{
						text = str.Substring(num, num2 - num);
						str = str.Replace(text, Public_Function.ReverseString(text));
						flag = false;
					}
				}
				return str;
			}
		}

		// Token: 0x06000C32 RID: 3122 RVA: 0x00144970 File Offset: 0x00142D70
		public static void SetHeader(StiReport rpt, bool Pdf = false)
		{
			StiText stiText = (StiText)rpt.GetComponentByName("head1");
			bool flag = stiText != null;
			bool flag2;
			if (flag)
			{
				flag2 = !Pdf;
				if (flag2)
				{
					stiText.Text = Public_Function.ToFarsi(Public_Function.dict["head1"]);
				}
				else
				{
					stiText.Text = Public_Function.RenderDigitToPdf(Public_Function.dict["head1"]);
				}
			}
			stiText = (StiText)rpt.GetComponentByName("head2");
			flag2 = (stiText != null);
			if (flag2)
			{
				flag = !Pdf;
				if (flag)
				{
					stiText.Text = Public_Function.ToFarsi(Public_Function.dict["head2"]);
				}
				else
				{
					stiText.Text = Public_Function.RenderDigitToPdf(Public_Function.dict["head2"]);
				}
			}
			stiText = (StiText)rpt.GetComponentByName("tarikh");
			flag2 = (stiText != null);
			if (flag2)
			{
				stiText.Text = Public_Function.MiladiToShamsi(DateAndTime.Now);
			}
			flag2 = Public_Function.dict.ContainsKey("eval");
			if (flag2)
			{
				flag = Conversions.ToBoolean(Public_Function.dict["eval"]);
				if (flag)
				{
					rpt.Pages[0].Watermark.Angle = 45f;
					rpt.Pages[0].Watermark.Text = "آزمایشی";
				}
			}
			else
			{
				rpt.Pages[0].Watermark = null;
			}
		}

		// Token: 0x06000C33 RID: 3123 RVA: 0x00144B00 File Offset: 0x00142F00
		public static void AddTazminText(StiReport rpt, bool left = true, bool Pdf = false)
		{
			StiComponent componentByName = rpt.GetComponentByName("txt_tazmin");
			StiText stiText = new StiText();
			bool flag = !Pdf;
			if (flag)
			{
				stiText.Text.Value = Public_Function.ToFarsi("www.tazminco.ir - نرم افزار تضمین - 09390244096");
			}
			else
			{
				stiText.Text.Value = Public_Function.ToFarsi("www.tazminco.ir - 69044209390 - نرم افزار تضمین");
			}
			flag = (componentByName != null);
			if (flag)
			{
				stiText = (StiText)componentByName;
				flag = !Pdf;
				if (flag)
				{
					stiText.Text.Value = Public_Function.ToFarsi("www.tazminco.ir - 09390244096 - نرم افزار تضمین");
				}
				else
				{
					stiText.Text.Value = Public_Function.ToFarsi("www.tazminco.ir - 69044209390 - نرم افزار تضمین");
				}
			}
			else
			{
				StiComponent arg_CF_0 = stiText;
				RectangleD clientRectangle = new RectangleD(-0.4, 1.7, 0.4, 9.0);
				arg_CF_0.ClientRectangle = clientRectangle;
				flag = !left;
				if (flag)
				{
					stiText.Left = 19.0;
				}
				stiText.Angle = 90f;
				stiText.HorAlignment = StiTextHorAlignment.Right;
				stiText.VertAlignment = StiVertAlignment.Bottom;
				stiText.Page = rpt.Pages[0];
				stiText.Parent = rpt.Pages[0];
				stiText.Name = "txt_tazmin";
				stiText.Font = new Font("Tahoma", 10f, FontStyle.Regular, GraphicsUnit.Point, 178);
				rpt.Pages[0].Components.Add(stiText);
			}
		}

		// Token: 0x06000C34 RID: 3124 RVA: 0x00144C84 File Offset: 0x00143084
		public static void RemoveZero(DataTable dt, string Field)
		{
			try
			{
				IEnumerator enumerator = dt.Rows.GetEnumerator();
				while (enumerator.MoveNext())
				{
					DataRow dataRow = (DataRow)enumerator.Current;
					bool flag = dataRow[Field] != DBNull.Value;
					if (flag)
					{
						dataRow[Field] = dataRow[Field].ToString().Replace(".0", "");
					}
				}
			}
			finally
			{
				IEnumerator enumerator;
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		// Token: 0x06000C35 RID: 3125 RVA: 0x00144D24 File Offset: 0x00143124
		public static bool DBExist()
		{
			SqlConnection sqlConnection = new SqlConnection("Data Source=" + Public_Function.Server + Public_Function.SQLInstance + ";Initial Catalog=master;Persist Security Info=True;User ID=sa;Password=1");
			sqlConnection.Open();
			SqlCommand sqlCommand = new SqlCommand("select Name from sys.databases where name='fruitbox'", sqlConnection);
			string left = Conversions.ToString(sqlCommand.ExecuteScalar());
			sqlConnection.Close();
			bool flag = Operators.CompareString(left, string.Empty, false) == 0;
			return !flag;
		}

		// Token: 0x06000C36 RID: 3126 RVA: 0x00144D9C File Offset: 0x0014319C
		public static void FirstRun()
		{
			CreateDB createDB = new CreateDB();
			createDB.CreateDB();
		}

		// Token: 0x06000C37 RID: 3127 RVA: 0x00144DB8 File Offset: 0x001431B8
		public static void Delete_Row(string table_name, long id)
		{
			DataTable dataTable = Public_Function.FillData("sp_fkeys " + table_name);
			string text = string.Empty;
			long value = Conversions.ToLong(Public_Function.ExecuteScalar("select id from deleted_objects where name=" + Public_Function.GetValue(table_name)));
			DataTable dataTable2 = Public_Function.FillData("select  * from Deleted_Objects_Manual where deleted_object_id=" + Conversions.ToString(value));
			string text2 = string.Empty;
			string right = string.Empty;
			try
			{
				IEnumerator enumerator = dataTable2.Rows.GetEnumerator();
				while (enumerator.MoveNext())
				{
					DataRow dataRow = (DataRow)enumerator.Current;
					DataRow[] array = dataTable.Select(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("fktable_name='", dataRow["table"]), "'")));
					bool flag = array.Length == 0;
					if (!flag)
					{
						right = Conversions.ToString(array[0]["fkcolumn_name"]);
						object arg_118_0 = null;
						Type arg_118_1 = typeof(Public_Function);
						string arg_118_2 = "SqlServer_Table_Columns_Without_Identity";
						object[] array2 = new object[1];
						object[] arg_FF_0 = array2;
						int arg_FF_1 = 0;
						DataRow dataRow2 = dataRow;
						DataRow arg_F5_0 = dataRow2;
						string columnName = "Referenced_Table";
						arg_FF_0[arg_FF_1] = RuntimeHelpers.GetObjectValue(arg_F5_0[columnName]);
						object[] array3 = array2;
						object[] arg_118_3 = array3;
						string[] arg_118_4 = null;
						Type[] arg_118_5 = null;
						bool[] array4 = new bool[]
						{
							true
						};
						object arg_136_0 = NewLateBinding.LateGet(arg_118_0, arg_118_1, arg_118_2, arg_118_3, arg_118_4, arg_118_5, array4);
						if (array4[0])
						{
							dataRow2[columnName] = RuntimeHelpers.GetObjectValue(array3[0]);
						}
						text2 = Conversions.ToString(arg_136_0);
						text = Conversions.ToString(Operators.ConcatenateObject(text, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("insert into deleted_", dataRow["Referenced_Table"]), " select * from "), dataRow["Referenced_Table"]), " where id in (select "), dataRow["column_name"]), " from "), dataRow["table"]), " where "), right), " ="), id), "   );")));
					}
				}
			}
			finally
			{
				IEnumerator enumerator;
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
			try
			{
				IEnumerator enumerator2 = dataTable.Rows.GetEnumerator();
				while (enumerator2.MoveNext())
				{
					DataRow dataRow3 = (DataRow)enumerator2.Current;
					text = Conversions.ToString(Operators.ConcatenateObject(text, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("insert into deleted_", dataRow3["fktable_name"]), " select * from "), dataRow3["fktable_name"]), " where "), dataRow3["fkcolumn_name"]), "="), id), ";")));
				}
			}
			finally
			{
				IEnumerator enumerator2;
				bool flag = enumerator2 is IDisposable;
				if (flag)
				{
					(enumerator2 as IDisposable).Dispose();
				}
			}
			text = string.Concat(new string[]
			{
				text,
				"insert into deleted_",
				table_name,
				" select *,getdate() from ",
				table_name,
				" where id=",
				Conversions.ToString(id),
				";"
			});
			Public_Function.ExecuteNonQuery(text);
		}

		// Token: 0x06000C38 RID: 3128 RVA: 0x00145144 File Offset: 0x00143544
		private static string SqlServer_Table_Columns_Without_Identity(string table_name, string Replace_column = "", string Replace_Value = "")
		{
			string text = string.Empty;
			DataTable dt = Public_Function.FillData(string.Concat(new string[]
			{
				"select '[' + COLUMN_NAME + ']' as column_name, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH  from INFORMATION_SCHEMA.COLUMNS IC  where TABLE_NAME =  ",
				Public_Function.GetValue(table_name),
				" and COLUMN_NAME not in (  select c.name  from sys.objects o  inner join sys.columns c on o.object_id = c.object_id  where o.type='U'  and o.name=",
				Public_Function.GetValue(table_name),
				" and c.is_identity = 1  )   order by ORDINAL_POSITION"
			}));
			text = Public_Function.GetID(dt, "column_name", "");
			bool flag = Operators.CompareString(Replace_column, "", false) != 0;
			if (flag)
			{
				text = text.Replace("[" + Replace_column + "]", Replace_Value);
			}
			return text;
		}

		// Token: 0x06000C39 RID: 3129 RVA: 0x001451E4 File Offset: 0x001435E4
		private static string SqlServer_Table_Columns_Without_Identity(string table_name, List<KeyValuePair<string, string>> m = null)
		{
			string result = string.Empty;
			DataTable dt = Public_Function.FillData(string.Concat(new string[]
			{
				"select '[' + COLUMN_NAME + ']' as column_name, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH  from INFORMATION_SCHEMA.COLUMNS IC  where TABLE_NAME =  ",
				Public_Function.GetValue(table_name),
				" and COLUMN_NAME not in (  select c.name  from sys.objects o  inner join sys.columns c on o.object_id = c.object_id  where o.type='U'  and o.name=",
				Public_Function.GetValue(table_name),
				" and c.is_identity = 1  )   order by ORDINAL_POSITION"
			}));
			result = Public_Function.GetID(dt, "column_name", "");
			try
			{
				List<KeyValuePair<string, string>>.Enumerator enumerator = m.GetEnumerator();
				while (enumerator.MoveNext())
				{
					KeyValuePair<string, string> current = enumerator.Current;
				}
			}
			finally
			{
				List<KeyValuePair<string, string>>.Enumerator enumerator;
				((IDisposable)enumerator).Dispose();
			}
			return result;
		}

		// Token: 0x06000C3A RID: 3130 RVA: 0x0014529C File Offset: 0x0014369C
		public static void Restore_Deleted_Row(string table_name, long id)
		{
			long value = Conversions.ToLong(Public_Function.ExecuteScalar("select id from deleted_objects where name=" + Public_Function.GetValue(table_name)));
			DataTable dataTable = Public_Function.FillData("select  * from Deleted_Objects_Manual where deleted_object_id=" + Conversions.ToString(value));
			DataTable dataTable2 = Public_Function.FillData("sp_fkeys " + table_name);
			string text = "declare @id as bigint; ";
			List<string> list = new List<string>();
			string text2 = string.Empty;
			text2 = Public_Function.SqlServer_Table_Columns_Without_Identity(table_name, "", "");
			List<KeyValuePair<string, string>> list2 = new List<KeyValuePair<string, string>>();
			text = string.Concat(new string[]
			{
				text,
				"insert into ",
				table_name,
				" (",
				text2,
				") select  ",
				text2,
				" from deleted_",
				table_name,
				" where id=",
				Conversions.ToString(id),
				";select @id=scope_identity();"
			});
			checked
			{
				try
				{
					IEnumerator enumerator = dataTable2.Rows.GetEnumerator();
					while (enumerator.MoveNext())
					{
						DataRow dataRow = (DataRow)enumerator.Current;
						DataRow[] array = dataTable.Select(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("table='", dataRow["fktable_name"]), "'")));
						bool flag = array.Length == 0;
						if (flag)
						{
							text2 = Public_Function.SqlServer_Table_Columns_Without_Identity(Conversions.ToString(dataRow["fktable_name"]), "", "");
							text = Conversions.ToString(Operators.ConcatenateObject(text, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("insert into ", dataRow["fktable_name"]), "("), text2), ")"), " select  "), Public_Function.SqlServer_Table_Columns_Without_Identity(Conversions.ToString(dataRow["fktable_name"]), Conversions.ToString(dataRow["fkcolumn_name"]), "@id")), " from "), "deleted_"), dataRow["fktable_name"]), " where "), dataRow["fkcolumn_name"]), "="), id), ";")));
						}
						else
						{
							DataRow[] array2 = array;
							for (int i = 0; i < array2.Length; i++)
							{
								DataRow dataRow2 = array2[i];
								list.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(dataRow2["column_name"], "_"), dataRow2["id"])));
								List<KeyValuePair<string, string>> arg_2D6_0 = list2;
								KeyValuePair<string, string> item = new KeyValuePair<string, string>(Conversions.ToString(dataRow2["column_name"]), Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(dataRow2["column_name"], "_"), dataRow2["id"])));
								arg_2D6_0.Add(item);
							}
							DataTable dataTable3 = Public_Function.FillData(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("select * from deleted_", array[0]["table"]), " where "), dataRow["fkcolumn_name"]), "="), id)));
							try
							{
								IEnumerator enumerator2 = dataTable3.Rows.GetEnumerator();
								while (enumerator2.MoveNext())
								{
									DataRow instance = (DataRow)enumerator2.Current;
									flag = Operators.ConditionalCompareObjectNotEqual(NewLateBinding.LateGet(instance, null, "Item", new object[]
									{
										RuntimeHelpers.GetObjectValue(array[0]["column_name"])
									}, null, null, null), DBNull.Value, false);
									if (flag)
									{
										object arg_4A2_0 = text;
										object arg_447_0 = Operators.ConcatenateObject(Operators.ConcatenateObject(" insert into ", array[0]["Referenced_Table"]), "(");
										object arg_426_0 = null;
										Type arg_426_1 = typeof(Public_Function);
										string arg_426_2 = "SqlServer_Table_Columns_Without_Identity";
										object[] array3 = new object[1];
										object[] arg_40D_0 = array3;
										int arg_40D_1 = 0;
										DataRow[] array4 = array;
										DataRow[] arg_3F9_0 = array4;
										int num = 0;
										DataRow arg_403_0 = arg_3F9_0[num];
										string columnName = "Referenced_Table";
										arg_40D_0[arg_40D_1] = RuntimeHelpers.GetObjectValue(arg_403_0[columnName]);
										object[] array5 = array3;
										object[] arg_426_3 = array5;
										string[] arg_426_4 = null;
										Type[] arg_426_5 = null;
										bool[] array6 = new bool[]
										{
											true
										};
										object arg_447_1 = NewLateBinding.LateGet(arg_426_0, arg_426_1, arg_426_2, arg_426_3, arg_426_4, arg_426_5, array6);
										if (array6[0])
										{
											array4[num][columnName] = RuntimeHelpers.GetObjectValue(array5[0]);
										}
										text = Conversions.ToString(Operators.ConcatenateObject(arg_4A2_0, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(arg_447_0, arg_447_1), ")"), " select * from "), "deleted_"), array[0]["Referenced_Table"]), " where id="), array[0]["column_name"]), ";")));
										text = Conversions.ToString(Operators.ConcatenateObject(text, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("insert into ", dataRow["fktable_name"]), "("), Public_Function.SqlServer_Table_Columns_Without_Identity(Conversions.ToString(dataRow["fktable_name"]), Conversions.ToString(array[0]["column_name"]), ""))));
									}
								}
							}
							finally
							{
								IEnumerator enumerator2;
								flag = (enumerator2 is IDisposable);
								if (flag)
								{
									(enumerator2 as IDisposable).Dispose();
								}
							}
						}
					}
				}
				finally
				{
					IEnumerator enumerator;
					bool flag = enumerator is IDisposable;
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
				Public_Function.ExecuteNonQuery(text);
			}
		}

		// Token: 0x06000C3B RID: 3131 RVA: 0x00145864 File Offset: 0x00143C64
		public static void LoadApplicationSetting()
		{
			Public_Function.Dt_FrmSize = Public_Function.FillData("select * from frm_size");
			DataTable dataTable = Public_Function.FillData("Select * from Setting");
			Public_Function.dict.Clear();
			bool flag;
			try
			{
				IEnumerator enumerator = dataTable.Rows.GetEnumerator();
				while (enumerator.MoveNext())
				{
					DataRow dataRow = (DataRow)enumerator.Current;
					flag = !Public_Function.dict.ContainsKey(dataRow["key"].ToString());
					if (flag)
					{
						Public_Function.dict.Add(dataRow["Key"].ToString().ToLower(), dataRow["Value"].ToString().ToLower());
					}
				}
			}
			finally
			{
				IEnumerator enumerator;
				flag = (enumerator is IDisposable);
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
			flag = !Public_Function.dict.ContainsKey("txt_moshtari_exit_on_save");
			if (flag)
			{
				Public_Function.dict.Add("txt_moshtari_exit_on_save", Conversions.ToString(true));
			}
			flag = !Public_Function.dict.ContainsKey("surat_bank_kind");
			if (flag)
			{
				Public_Function.dict.Add("surat_bank_kind", Conversions.ToString(1));
			}
			flag = !Public_Function.dict.ContainsKey("kharid_keraye_moshtari");
			if (flag)
			{
				Public_Function.dict.Add("kharid_keraye_moshtari", Conversions.ToString(false));
			}
			flag = !Public_Function.dict.ContainsKey("kharid_keraye_tozih");
			if (flag)
			{
				Public_Function.dict.Add("kharid_keraye_tozih", Conversions.ToString(false));
			}
			Public_Function.dict.Add("today", Public_Function.MiladiToShamsi(DateAndTime.Now));
			flag = !Public_Function.dict.ContainsKey("three_zero");
			if (flag)
			{
				Public_Function.dict.Add("three_zero", Conversions.ToString(true));
			}
			flag = !Public_Function.dict.ContainsKey("factor_furush_show_sharik");
			if (flag)
			{
				Public_Function.dict.Add("factor_furush_show_sharik", Conversions.ToString(false));
			}
			flag = !Public_Function.dict.ContainsKey("factor_Furush_show_tedad_sefr");
			if (flag)
			{
				Public_Function.dict.Add("factor_Furush_show_tedad_sefr", Conversions.ToString(true));
			}
			flag = !Public_Function.dict.ContainsKey("noe_mojodi_anbar");
			if (flag)
			{
				Public_Function.dict.Add("noe_mojodi_anbar", "1");
			}
			flag = !Public_Function.dict.ContainsKey("startup");
			if (flag)
			{
				Public_Function.dict.Add("startup", Conversions.ToString(true));
			}
			flag = !Public_Function.dict.ContainsKey("autotakhlie");
			if (flag)
			{
				Public_Function.dict.Add("autotakhlie", Conversions.ToString(false));
			}
			flag = !Public_Function.dict.ContainsKey("autosurat");
			if (flag)
			{
				Public_Function.dict.Add("autosurat", Conversions.ToString(true));
			}
			flag = !Public_Function.dict.ContainsKey("noesafi");
			if (flag)
			{
				Public_Function.dict.Add("noesafi", "1");
			}
			flag = Public_Function.dict.ContainsKey("owner");
			if (flag)
			{
				MyProject.Forms.Form_Main.txt_CompanyName.Text = Public_Function.dict["owner"];
			}
			else
			{
				Public_Function.dict.Add("owner", "");
			}
			flag = !Public_Function.dict.ContainsKey("head1");
			if (flag)
			{
				Public_Function.dict.Add("head1", "نسخه نمایشی");
			}
			flag = !Public_Function.dict.ContainsKey("showavaldore");
			if (flag)
			{
				Public_Function.dict.Add("showavaldore", Conversions.ToString(false));
			}
			flag = !Public_Function.dict.ContainsKey("head2");
			if (flag)
			{
				Public_Function.dict.Add("head2", "نسخه نمایشی");
			}
			flag = !Public_Function.dict.ContainsKey("fullscreen");
			if (flag)
			{
				Public_Function.dict.Add("fullscreen", Conversions.ToString(true));
			}
			flag = !Public_Function.dict.ContainsKey("showmemo");
			if (flag)
			{
				Public_Function.dict.Add("showmemo", Conversions.ToString(true));
			}
			flag = !Public_Function.dict.ContainsKey("showstatus");
			if (flag)
			{
				Public_Function.dict.Add("showstatus", Conversions.ToString(true));
			}
			flag = !Public_Function.dict.ContainsKey("showtoolbar");
			if (flag)
			{
				Public_Function.dict.Add("showtoolbar", Conversions.ToString(true));
			}
			flag = !Public_Function.dict.ContainsKey("theme");
			if (flag)
			{
				Public_Function.dict.Add("theme", Conversions.ToString(-1));
			}
			flag = !Public_Function.dict.ContainsKey("showmax");
			if (flag)
			{
				Public_Function.dict.Add("showmax", Conversions.ToString(true));
			}
			flag = !Public_Function.dict.ContainsKey("sarresid_d");
			if (flag)
			{
				Public_Function.dict.Add("sarresid_d", Conversions.ToString(0));
			}
			flag = !Public_Function.dict.ContainsKey("sarresid_p");
			if (flag)
			{
				Public_Function.dict.Add("sarresid_p", Conversions.ToString(0));
			}
			flag = !Public_Function.dict.ContainsKey("textfont");
			if (flag)
			{
				Public_Function.dict.Add("textfont", "mitra;14.25;bold");
			}
			flag = !Public_Function.dict.ContainsKey("gridfont");
			if (flag)
			{
				Public_Function.dict.Add("gridfont", "mitra;14.25;bold");
			}
			flag = !Public_Function.dict.ContainsKey("kiosk_auto_kasr");
			if (flag)
			{
				Public_Function.dict.Add("kiosk_auto_kasr", Conversions.ToString(false));
			}
			flag = !Public_Function.dict.ContainsKey("newrow_kala");
			if (flag)
			{
				Public_Function.dict.Add("newrow_kala", Conversions.ToString(true));
			}
			flag = !Public_Function.dict.ContainsKey("show_newversion");
			if (flag)
			{
				Public_Function.dict.Add("show_newversion", Conversions.ToString(true));
			}
			flag = !Public_Function.dict.ContainsKey("autolock");
			if (flag)
			{
				Public_Function.dict.Add("autolock", "4");
			}
			flag = !Public_Function.dict.ContainsKey("sardkhane_vaznkol");
			if (flag)
			{
				Public_Function.dict.Add("sardkhane_vaznkol", Conversions.ToString(false));
			}
			flag = !Public_Function.dict.ContainsKey("sardkhane_keraye_moshtari");
			if (flag)
			{
				Public_Function.dict.Add("sardkhane_keraye_moshtari", Conversions.ToString(true));
			}
			flag = !Public_Function.dict.ContainsKey("sardkhane_keraye_tozih");
			if (flag)
			{
				Public_Function.dict.Add("sardkhane_keraye_tozih", Conversions.ToString(true));
			}
			bool flag2;
			try
			{
				Font font = new Font(Public_Function.dict["gridfont"].ToString().Split(new char[]
				{
					';'
				})[0], 10f);
				flag = (Operators.CompareString(Public_Function.dict["gridfont"].ToString().Split(new char[]
				{
					';'
				})[0].ToLower(), "mitra", false) == 0);
				if (flag)
				{
					flag2 = (Operators.CompareString(font.FontFamily.Name.ToLower(), "mitra", false) != 0);
					if (flag2)
					{
						Public_Function.dict["gridfont"] = "b mitra;14.25;bold";
						Public_Function.dict["textfont"] = "b mitra;14.25;bold";
					}
				}
			}
			catch (Exception expr_7E4)
			{
				ProjectData.SetProjectError(expr_7E4);
				ProjectData.ClearProjectError();
			}
			flag2 = !Public_Function.dict.ContainsKey("printfont_number");
			if (flag2)
			{
				Public_Function.dict.Add("printfont_number", "");
			}
			flag2 = !Public_Function.dict.ContainsKey("dbname");
			if (flag2)
			{
				Public_Function.dict.Add("dbname", "fruitbox");
			}
			flag2 = !Public_Function.dict.ContainsKey("nahve_furush");
			if (flag2)
			{
				Public_Function.dict.Add("nahve_furush", "1");
			}
			flag2 = !Public_Function.dict.ContainsKey("nahve_kharid");
			if (flag2)
			{
				Public_Function.dict.Add("nahve_kharid", "1");
			}
			flag2 = !Public_Function.dict.ContainsKey("sms_number");
			if (flag2)
			{
				Public_Function.dict.Add("sms_number", "10000005550055");
			}
			flag2 = !Public_Function.dict.ContainsKey("show_avg");
			if (flag2)
			{
				Public_Function.dict.Add("show_avg", Conversions.ToString(false));
			}
			flag2 = !Public_Function.dict.ContainsKey("kargari");
			if (flag2)
			{
				Public_Function.dict.Add("kargari", Conversions.ToString(false));
			}
			flag2 = !Public_Function.dict.ContainsKey("bedehkaran_jamkol");
			if (flag2)
			{
				Public_Function.dict.Add("bedehkaran_jamkol", Conversions.ToString(true));
			}
			flag2 = !Public_Function.dict.ContainsKey("bedehkaran_tel");
			if (flag2)
			{
				Public_Function.dict.Add("bedehkaran_tel", Conversions.ToString(true));
			}
			flag2 = !Public_Function.dict.ContainsKey("no_bed_alert");
			if (flag2)
			{
				Public_Function.dict.Add("no_bed_alert", Conversions.ToString(false));
			}
			flag2 = !Public_Function.dict.ContainsKey("no_hazine_agsat");
			if (flag2)
			{
				Public_Function.dict.Add("no_hazine_agsat", Conversions.ToString(false));
			}
			flag2 = !Public_Function.dict.ContainsKey("kharid_baz");
			if (flag2)
			{
				Public_Function.dict.Add("kharid_baz", "1");
			}
			flag2 = !Public_Function.dict.ContainsKey("altbackup");
			if (flag2)
			{
				Public_Function.dict.Add("altbackup", Conversions.ToString(false));
			}
			flag2 = !Public_Function.dict.ContainsKey("elan_check");
			if (flag2)
			{
				Public_Function.dict.Add("elan_check", Conversions.ToString(true));
			}
			flag2 = !Public_Function.dict.ContainsKey("desktop_note");
			if (flag2)
			{
				Public_Function.dict.Add("desktop_note", Conversions.ToString(true));
			}
			flag2 = !Public_Function.dict.ContainsKey("daryaftcheck");
			if (flag2)
			{
				Public_Function.dict.Add("daryaftcheck", "1111");
			}
			flag2 = !Public_Function.dict.ContainsKey("surathesab_tasvie");
			if (flag2)
			{
				Public_Function.dict.Add("surathesab_tasvie", Conversions.ToString(true));
			}
			flag2 = !Public_Function.dict.ContainsKey("auto_vusul");
			if (flag2)
			{
				Public_Function.dict.Add("auto_vusul", Conversions.ToString(true));
			}
			flag2 = !Public_Function.dict.ContainsKey("auto_vusul_d");
			if (flag2)
			{
				Public_Function.dict.Add("auto_vusul_d", Conversions.ToString(false));
			}
			flag2 = !Public_Function.dict.ContainsKey("kharid_sardkhane_factor");
			if (flag2)
			{
				Public_Function.dict.Add("kharid_sardkhane_factor", Conversions.ToString(false));
			}
			flag2 = !Public_Function.dict.ContainsKey("paper_margin_top");
			if (flag2)
			{
				Public_Function.dict.Add("paper_margin_top", "0.4");
			}
			flag2 = !Public_Function.dict.ContainsKey("moshtari_show_contact_info");
			if (flag2)
			{
				Public_Function.dict.Add("moshtari_show_contact_info", Conversions.ToString(true));
			}
			flag2 = !Public_Function.dict.ContainsKey("moshtari_show_pic");
			if (flag2)
			{
				Public_Function.dict.Add("moshtari_show_pic", Conversions.ToString(true));
			}
			flag2 = !Public_Function.dict.ContainsKey("moshtari_show_mahal");
			if (flag2)
			{
				Public_Function.dict.Add("moshtari_show_mahal", Conversions.ToString(true));
			}
			flag2 = !Public_Function.dict.ContainsKey("moshtari_exit_on_save");
			if (flag2)
			{
				Public_Function.dict.Add("moshtari_exit_on_save", Conversions.ToString(true));
			}
			flag2 = !Public_Function.dict.ContainsKey("kharid_kind");
			if (flag2)
			{
				Public_Function.dict.Add("kharid_kind", Conversions.ToString(1));
			}
			flag2 = !Public_Function.dict.ContainsKey("oft");
			if (flag2)
			{
				Public_Function.dict.Add("oft", Conversions.ToString(false));
			}
			flag2 = !Public_Function.dict.ContainsKey("oft_tedad");
			if (flag2)
			{
				Public_Function.dict.Add("oft_tedad", Conversions.ToString(false));
			}
			flag2 = !Public_Function.dict.ContainsKey("oft_kind");
			if (flag2)
			{
				Public_Function.dict.Add("oft_kind", Conversions.ToString(2));
			}
			flag2 = !Public_Function.dict.ContainsKey("kargari_sud");
			if (flag2)
			{
				Public_Function.dict.Add("kargari_sud", Conversions.ToString(true));
			}
			flag2 = !Public_Function.dict.ContainsKey("kargari_kind");
			if (flag2)
			{
				Public_Function.dict.Add("kargari_kind", Conversions.ToString(1));
			}
			flag2 = !Public_Function.dict.ContainsKey("kargari_fee");
			if (flag2)
			{
				Public_Function.dict.Add("kargari_fee", Conversions.ToString(0));
			}
			flag2 = !Public_Function.dict.ContainsKey("arz_kind");
			if (flag2)
			{
				Public_Function.dict.Add("arz_kind", "0");
			}
			flag2 = !Public_Function.dict.ContainsKey("factor_furush_sanad_kind");
			if (flag2)
			{
				Public_Function.dict.Add("factor_furush_sanad_kind", Conversions.ToString(0));
			}
			flag2 = !Public_Function.dict.ContainsKey("factor_furush_control_mojudi");
			if (flag2)
			{
				Public_Function.dict.Add("factor_furush_control_mojudi", Conversions.ToString(true));
			}
			flag2 = !Public_Function.dict.ContainsKey("multiowner");
			if (flag2)
			{
				Public_Function.dict.Add("multiowner", Conversions.ToString(false));
			}
		}

		// Token: 0x06000C3C RID: 3132 RVA: 0x00146718 File Offset: 0x00144B18
		public static string FormatPrice(string value)
		{
			bool flag = Operators.CompareString(value, string.Empty, false) == 0;
			string result;
			if (flag)
			{
				result = string.Empty;
			}
			else
			{
				flag = (Operators.CompareString(value, "0", false) == 0);
				if (flag)
				{
					result = "0";
				}
				else
				{
					result = Strings.FormatNumber(Conversions.ToLong(value), 0, Microsoft.VisualBasic.TriState.False, Microsoft.VisualBasic.TriState.False, Microsoft.VisualBasic.TriState.True);
				}
			}
			return result;
		}

		// Token: 0x06000C3D RID: 3133 RVA: 0x00146778 File Offset: 0x00144B78
		public static void AddFilterColumn(GridEX Grid)
		{
			bool flag = Grid.DataSource == null;
			if (!flag)
			{
				DataTable dataTable = (DataTable)Grid.DataSource;
				flag = !dataTable.Columns.Contains("Filter");
				if (flag)
				{
					dataTable.Columns.Add("Filter", typeof(string));
				}
				string text = string.Empty;
				try
				{
					IEnumerator enumerator = dataTable.Rows.GetEnumerator();
					while (enumerator.MoveNext())
					{
						DataRow dataRow = (DataRow)enumerator.Current;
						try
						{
							IEnumerator enumerator2 = Grid.RootTable.Columns.GetEnumerator();
							while (enumerator2.MoveNext())
							{
								GridEXColumn gridEXColumn = (GridEXColumn)enumerator2.Current;
								flag = (Operators.CompareString(gridEXColumn.DataMember, string.Empty, false) == 0);
								if (!flag)
								{
									flag = gridEXColumn.Visible;
									if (flag)
									{
										text += dataRow[gridEXColumn.DataMember].ToString();
									}
								}
							}
						}
						finally
						{
							IEnumerator enumerator2;
							flag = (enumerator2 is IDisposable);
							if (flag)
							{
								(enumerator2 as IDisposable).Dispose();
							}
						}
						dataRow["filter"] = text;
						text = string.Empty;
					}
				}
				finally
				{
					IEnumerator enumerator;
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
		}

		// Token: 0x06000C3E RID: 3134 RVA: 0x00146900 File Offset: 0x00144D00
		public static void FilterGrid(GridEX Grid, string Text)
		{
			DataView defaultView = ((DataTable)Grid.DataSource).DefaultView;
			bool flag = Operators.CompareString(Text, string.Empty, false) == 0;
			if (flag)
			{
				defaultView.RowFilter = "";
			}
			else
			{
				defaultView.RowFilter = "filter LIKE '%" + Text + "%'";
				Grid.Refetch();
				Public_Function.HighlightCell(Grid, Text);
			}
		}

		// Token: 0x06000C3F RID: 3135 RVA: 0x0014696C File Offset: 0x00144D6C
		public static string GetPathName(DataRow dr, string prefix)
		{
			bool flag = Operators.CompareString(prefix, string.Empty, false) != 0;
			if (flag)
			{
				prefix += "_";
			}
			string text = string.Empty;
			flag = (dr[prefix + "Taf2_Name"] != DBNull.Value);
			if (flag)
			{
				text = Conversions.ToString(Operators.ConcatenateObject(text, Operators.ConcatenateObject(dr[prefix + "Taf2_Name"], "\\")));
			}
			flag = (dr[prefix + "Taf1_Name"] != DBNull.Value);
			if (flag)
			{
				text = Conversions.ToString(Operators.ConcatenateObject(text, Operators.ConcatenateObject(dr[prefix + "Taf1_Name"], "\\")));
			}
			flag = (dr[prefix + "Moin_Name"] != DBNull.Value);
			if (flag)
			{
				text = Conversions.ToString(Operators.ConcatenateObject(text, Operators.ConcatenateObject(dr[prefix + "Moin_Name"], "\\")));
			}
			flag = (dr[prefix + "Kol_Name"] != DBNull.Value);
			if (flag)
			{
				text = Conversions.ToString(Operators.ConcatenateObject(text, dr[prefix + "Kol_Name"]));
			}
			return text;
		}

		// Token: 0x06000C40 RID: 3136 RVA: 0x00146ABC File Offset: 0x00144EBC
		public static string GetLastPathName(DataRow dr, string prefix)
		{
			string empty = string.Empty;
			bool flag = Operators.CompareString(prefix, string.Empty, false) != 0;
			if (flag)
			{
				prefix += "_";
			}
			flag = (dr[prefix + "Taf2_Name"] != DBNull.Value);
			string result;
			if (flag)
			{
				result = Conversions.ToString(dr[prefix + "Taf2_Name"]);
			}
			else
			{
				flag = (dr[prefix + "Taf1_Name"] != DBNull.Value);
				if (flag)
				{
					result = Conversions.ToString(dr[prefix + "Taf1_Name"]);
				}
				else
				{
					flag = (dr[prefix + "Moin_Name"] != DBNull.Value);
					if (flag)
					{
						result = Conversions.ToString(dr[prefix + "Moin_Name"]);
					}
					else
					{
						flag = (dr[prefix + "Kol_Name"] != DBNull.Value);
						if (flag)
						{
							result = Conversions.ToString(dr[prefix + "Kol_Name"]);
						}
						else
						{
							result = empty;
						}
					}
				}
			}
			return result;
		}

		// Token: 0x06000C41 RID: 3137 RVA: 0x00146BE0 File Offset: 0x00144FE0
		public static string GetCodeName(DataRow dr, string prefix)
		{
			bool flag = Operators.CompareString(prefix, string.Empty, false) != 0;
			if (flag)
			{
				prefix += "_";
			}
			return dr[prefix + "Kol_Code"].ToString() + dr[prefix + "Moin_Code"].ToString() + dr[prefix + "Taf1_Code"].ToString() + dr[prefix + "Taf2_Code"].ToString();
		}

		// Token: 0x06000C42 RID: 3138 RVA: 0x00146C74 File Offset: 0x00145074
		public static DataTable CopyTableView(DataTable tabla, string Name)
		{
			DataTable dataTable = tabla.Clone();
			bool flag = Operators.CompareString(Name, string.Empty, false) != 0;
			if (flag)
			{
				dataTable.TableName = Name;
			}
			dataTable.DefaultView.RowFilter = tabla.DefaultView.RowFilter;
			try
			{
				IEnumerator enumerator = tabla.DefaultView.GetEnumerator();
				while (enumerator.MoveNext())
				{
					DataRowView dataRowView = (DataRowView)enumerator.Current;
					dataTable.ImportRow(dataRowView.Row);
				}
			}
			finally
			{
				IEnumerator enumerator;
				flag = (enumerator is IDisposable);
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
			return dataTable;
		}

		// Token: 0x06000C43 RID: 3139 RVA: 0x00146D30 File Offset: 0x00145130
		public static void ReplaceColumnValue(GridEX grid, string Column, DataTable dt, string IdColumn, string DisplayColumn)
		{
			GridEXDropDown gridEXDropDown = grid.DropDowns.Add();
			gridEXDropDown.RootTable.Columns.Add(IdColumn, ColumnType.Text);
			gridEXDropDown.RootTable.Columns.Add(DisplayColumn, ColumnType.Text);
			gridEXDropDown.ReplaceValues = true;
			grid.RootTable.Columns[Column].HasValueList = true;
			grid.RootTable.Columns[Column].DropDown = gridEXDropDown;
			try
			{
				IEnumerator enumerator = dt.Rows.GetEnumerator();
				while (enumerator.MoveNext())
				{
					DataRow dataRow = (DataRow)enumerator.Current;
					grid.RootTable.Columns[Column].ValueList.Add(RuntimeHelpers.GetObjectValue(dataRow[IdColumn]), Conversions.ToString(dataRow[DisplayColumn]));
				}
			}
			finally
			{
				IEnumerator enumerator;
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		// Token: 0x06000C44 RID: 3140 RVA: 0x00146E38 File Offset: 0x00145238
		public static string GetValue(string s)
		{
			bool flag = Operators.CompareString(s, string.Empty, false) == 0;
			string result;
			if (flag)
			{
				result = "NULL";
			}
			else
			{
				result = "N'" + s + "'";
			}
			return result;
		}

		// Token: 0x06000C45 RID: 3141 RVA: 0x00146E7C File Offset: 0x0014527C
		public static string GetValueInt(string s)
		{
			bool flag = Operators.CompareString(s, string.Empty, false) == 0;
			string result;
			if (flag)
			{
				result = "NULL";
			}
			else
			{
				flag = (Operators.CompareString(s.ToLower(), "true", false) == 0);
				if (flag)
				{
					result = Conversions.ToString(1);
				}
				else
				{
					flag = (Operators.CompareString(s.ToLower(), "false", false) == 0);
					if (flag)
					{
						result = Conversions.ToString(0);
					}
					else
					{
						result = s;
					}
				}
			}
			return result;
		}

		// Token: 0x06000C46 RID: 3142 RVA: 0x00146EF4 File Offset: 0x001452F4
		public static object FillLeft(string s, string value, int length)
		{
			checked
			{
				for (int i = 1; i <= length; i++)
				{
					s = s.Insert(0, value);
				}
				return s;
			}
		}

		// Token: 0x06000C47 RID: 3143 RVA: 0x00146F24 File Offset: 0x00145324
		public static object FillZero(string s, int FixLength)
		{
			int arg_0B_0 = 1;
			checked
			{
				int num = FixLength - s.Length;
				int num2 = arg_0B_0;
				while (true)
				{
					int arg_25_0 = num2;
					int num3 = num;
					if (arg_25_0 > num3)
					{
						break;
					}
					s = s.Insert(0, "0");
					num2++;
				}
				return s;
			}
		}

		// Token: 0x06000C48 RID: 3144 RVA: 0x00146F60 File Offset: 0x00145360
		public static bool ExistValue(string TableName, string FieldName, string Value)
		{
			return Public_Function.ExecuteScalar(string.Concat(new string[]
			{
				"select top 1  ",
				FieldName,
				" from  ",
				TableName,
				" where ",
				FieldName,
				"=N'",
				Value,
				"'"
			})) != null;
		}

		// Token: 0x06000C49 RID: 3145 RVA: 0x00146FDC File Offset: 0x001453DC
		public static bool ExistValue(string TableName, string FieldName, string Value, string FieldID, string Notin)
		{
			return Public_Function.ExecuteScalar(string.Concat(new string[]
			{
				"select top 1  ",
				FieldName,
				" from  ",
				TableName,
				" where ",
				FieldName,
				"=N'",
				Value,
				"' AND ",
				FieldID,
				" NOT IN (",
				Notin,
				") "
			})) != null;
		}

		// Token: 0x06000C4A RID: 3146 RVA: 0x00147078 File Offset: 0x00145478
		public static SqlCommand CreateSqlCommand(string Command)
		{
			return new SqlCommand
			{
				Connection = Public_Function.Connection,
				CommandText = Command,
				CommandType = CommandType.StoredProcedure
			};
		}

		// Token: 0x06000C4B RID: 3147 RVA: 0x001470B0 File Offset: 0x001454B0
		public static object ExecuteScalar(SqlCommand command)
		{
			return command.ExecuteScalar();
		}

		// Token: 0x06000C4C RID: 3148 RVA: 0x001470C8 File Offset: 0x001454C8
		public static object ExecuteScalar(string Command)
		{
			SqlCommand sqlCommand = new SqlCommand
			{
				Connection = Public_Function.Connection,
				CommandText = Command
			};
			object result;
			try
			{
				result = sqlCommand.ExecuteScalar();
			}
			catch (Exception expr_29)
			{
				ProjectData.SetProjectError(expr_29);
				Exception ex = expr_29;
				bool flag = ex is SqlException;
				if (flag)
				{
					bool flag2 = ((SqlException)ex).Number == 233;
					if (flag2)
					{
						Public_Function.Reconnect();
						result = sqlCommand.ExecuteScalar();
						ProjectData.ClearProjectError();
					}
					else
					{
						result = sqlCommand.ExecuteScalar();
						ProjectData.ClearProjectError();
					}
				}
				else
				{
					result = sqlCommand.ExecuteScalar();
					ProjectData.ClearProjectError();
				}
			}
			return result;
		}

		// Token: 0x06000C4D RID: 3149 RVA: 0x00147180 File Offset: 0x00145580
		public static void ExecuteNonQuery(SqlCommand command)
		{
			SqlTransaction sqlTransaction = Public_Function.Connection.BeginTransaction();
			try
			{
				command.Transaction = sqlTransaction;
				command.ExecuteNonQuery();
				sqlTransaction.Commit();
			}
			catch (SqlException expr_25)
			{
				ProjectData.SetProjectError(expr_25);
				sqlTransaction.Rollback();
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06000C4E RID: 3150 RVA: 0x001471DC File Offset: 0x001455DC
		public static bool ExecuteNonQuery(string Command, string mConnection)
		{
			OleDbConnection oleDbConnection = new OleDbConnection(mConnection);
			oleDbConnection.Open();
			bool result;
			try
			{
				OleDbCommand oleDbCommand = new OleDbCommand
				{
					Connection = oleDbConnection,
					CommandText = Command
				};
				oleDbCommand.ExecuteNonQuery();
				oleDbConnection.Close();
				result = true;
			}
			catch (OleDbException expr_40)
			{
				ProjectData.SetProjectError(expr_40);
				oleDbConnection.Close();
				result = false;
				ProjectData.ClearProjectError();
			}
			return result;
		}

		// Token: 0x06000C4F RID: 3151 RVA: 0x0014725C File Offset: 0x0014565C
		public static bool ExecuteNonQuery(string Command)
		{
			bool flag = Operators.CompareString(Command, string.Empty, false) == 0;
			bool result;
			if (flag)
			{
				result = false;
			}
			else
			{
				SqlTransaction sqlTransaction = Public_Function.Connection.BeginTransaction();
				SqlCommand sqlCommand = new SqlCommand
				{
					Connection = Public_Function.Connection,
					CommandText = Command
				};
				sqlCommand.Transaction = sqlTransaction;
				try
				{
					sqlCommand.ExecuteNonQuery();
					sqlTransaction.Commit();
					result = true;
				}
				catch (SqlException expr_6C)
				{
					ProjectData.SetProjectError(expr_6C);
					SqlException ex = expr_6C;
					sqlTransaction.Rollback();
					flag = (ex is SqlException);
					if (flag)
					{
						bool flag2 = ex.Number == 233;
						if (flag2)
						{
							Public_Function.Reconnect();
							SqlTransaction sqlTransaction2 = Public_Function.Connection.BeginTransaction();
							sqlCommand.Transaction = sqlTransaction2;
							try
							{
								sqlCommand.ExecuteNonQuery();
								sqlTransaction2.Commit();
								result = true;
								ProjectData.ClearProjectError();
								return result;
							}
							catch (Exception expr_D9)
							{
								ProjectData.SetProjectError(expr_D9);
								sqlTransaction2.Rollback();
								result = false;
								ProjectData.ClearProjectError();
								return result;
							}
						}
						SqlTransaction sqlTransaction3 = Public_Function.Connection.BeginTransaction();
						sqlCommand.Transaction = sqlTransaction3;
						try
						{
							sqlCommand.ExecuteNonQuery();
							sqlTransaction3.Commit();
							result = true;
							ProjectData.ClearProjectError();
							return result;
						}
						catch (Exception expr_134)
						{
							ProjectData.SetProjectError(expr_134);
							sqlTransaction3.Rollback();
							result = false;
							ProjectData.ClearProjectError();
							return result;
						}
					}
					SqlTransaction sqlTransaction4 = Public_Function.Connection.BeginTransaction();
					sqlCommand.Transaction = sqlTransaction4;
					try
					{
						sqlCommand.ExecuteNonQuery();
						sqlTransaction4.Commit();
						result = true;
						ProjectData.ClearProjectError();
					}
					catch (Exception expr_18A)
					{
						ProjectData.SetProjectError(expr_18A);
						sqlTransaction4.Rollback();
						result = false;
						ProjectData.ClearProjectError();
					}
				}
			}
			return result;
		}

		// Token: 0x06000C50 RID: 3152 RVA: 0x0014748C File Offset: 0x0014588C
		public static DataTable FillData_by_sp(string Command, List<SqlParameter> parameters)
		{
			SqlDataAdapter sqlDataAdapter = new SqlDataAdapter();
			DataTable dataTable = new DataTable();
			sqlDataAdapter.SelectCommand = new SqlCommand
			{
				Connection = Public_Function.Connection,
				CommandText = Command
			};
			try
			{
				try
				{
					List<SqlParameter>.Enumerator enumerator = parameters.GetEnumerator();
					while (enumerator.MoveNext())
					{
						SqlParameter current = enumerator.Current;
						sqlDataAdapter.SelectCommand.Parameters.Add(current);
					}
				}
				finally
				{
					List<SqlParameter>.Enumerator enumerator;
					((IDisposable)enumerator).Dispose();
				}
				sqlDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
				sqlDataAdapter.Fill(dataTable);
			}
			catch (Exception expr_90)
			{
				ProjectData.SetProjectError(expr_90);
				Exception ex = expr_90;
				bool flag = ex is SqlException;
				if (flag)
				{
					bool flag2 = ((SqlException)ex).Number == 233;
					if (flag2)
					{
						Public_Function.Reconnect();
						sqlDataAdapter.Fill(dataTable);
					}
					else
					{
						sqlDataAdapter.Fill(dataTable);
					}
				}
				else
				{
					sqlDataAdapter.Fill(dataTable);
				}
				ProjectData.ClearProjectError();
			}
			return dataTable;
		}

		// Token: 0x06000C51 RID: 3153 RVA: 0x001475AC File Offset: 0x001459AC
		public static DataTable FillData(string Command)
		{
			SqlDataAdapter sqlDataAdapter = new SqlDataAdapter();
			DataTable dataTable = new DataTable();
			sqlDataAdapter.SelectCommand = new SqlCommand
			{
				Connection = Public_Function.Connection,
				CommandText = Command
			};
			try
			{
				sqlDataAdapter.Fill(dataTable);
			}
			catch (Exception expr_3E)
			{
				ProjectData.SetProjectError(expr_3E);
				Exception ex = expr_3E;
				bool flag = ex is SqlException;
				if (flag)
				{
					bool flag2 = ((SqlException)ex).Number == 233;
					if (flag2)
					{
						Public_Function.Reconnect();
						sqlDataAdapter.Fill(dataTable);
					}
					else
					{
						sqlDataAdapter.Fill(dataTable);
					}
				}
				else
				{
					sqlDataAdapter.Fill(dataTable);
				}
				ProjectData.ClearProjectError();
			}
			return dataTable;
		}

		// Token: 0x06000C52 RID: 3154 RVA: 0x0014766C File Offset: 0x00145A6C
		public static DataTable FillSchema(string Command)
		{
			SqlDataAdapter sqlDataAdapter = new SqlDataAdapter();
			DataTable dataTable = new DataTable();
			sqlDataAdapter.SelectCommand = new SqlCommand
			{
				Connection = Public_Function.Connection,
				CommandText = Command
			};
			try
			{
				sqlDataAdapter.Fill(dataTable);
			}
			catch (Exception expr_3E)
			{
				ProjectData.SetProjectError(expr_3E);
				Exception ex = expr_3E;
				bool flag = ex is SqlException;
				if (flag)
				{
					bool flag2 = ((SqlException)ex).Number == 233;
					if (flag2)
					{
						Public_Function.Reconnect();
						sqlDataAdapter.FillSchema(dataTable, SchemaType.Mapped);
					}
					else
					{
						sqlDataAdapter.FillSchema(dataTable, SchemaType.Mapped);
					}
				}
				else
				{
					sqlDataAdapter.FillSchema(dataTable, SchemaType.Mapped);
				}
				ProjectData.ClearProjectError();
			}
			return dataTable;
		}

		// Token: 0x06000C53 RID: 3155 RVA: 0x0014772C File Offset: 0x00145B2C
		public static DataRow FillDataRow(string Command)
		{
			SqlDataAdapter sqlDataAdapter = new SqlDataAdapter();
			DataTable dataTable = new DataTable();
			sqlDataAdapter.SelectCommand = new SqlCommand
			{
				Connection = Public_Function.Connection,
				CommandText = Command
			};
			bool flag2;
			try
			{
				sqlDataAdapter.Fill(dataTable);
			}
			catch (Exception expr_3E)
			{
				ProjectData.SetProjectError(expr_3E);
				Exception ex = expr_3E;
				bool flag = ex is SqlException;
				if (flag)
				{
					flag2 = (((SqlException)ex).Number == 233);
					if (flag2)
					{
						Public_Function.Reconnect();
						sqlDataAdapter.Fill(dataTable);
					}
					else
					{
						sqlDataAdapter.Fill(dataTable);
					}
				}
				else
				{
					sqlDataAdapter.Fill(dataTable);
				}
				ProjectData.ClearProjectError();
			}
			flag2 = (dataTable.Rows.Count > 0);
			DataRow result;
			if (flag2)
			{
				result = dataTable.Rows[0];
			}
			else
			{
				result = null;
			}
			return result;
		}

		// Token: 0x06000C54 RID: 3156 RVA: 0x00147810 File Offset: 0x00145C10
		public static void Reconnect()
		{
			Public_Function.Connection.Close();
			Public_Function.Connection.Open();
		}

		// Token: 0x06000C55 RID: 3157 RVA: 0x0014782C File Offset: 0x00145C2C
		public static string GetID(DataTable Dt, string idcolumn, string defaultvalue = "")
		{
			string text = string.Empty;
			bool flag = Dt == null;
			string result;
			if (flag)
			{
				bool flag2 = Operators.CompareString(defaultvalue, "", false) == 0;
				if (flag2)
				{
					result = text;
				}
				else
				{
					result = defaultvalue;
				}
			}
			else
			{
				bool flag2 = Dt.Rows.Count == 0;
				if (flag2)
				{
					flag = (Operators.CompareString(defaultvalue, "", false) == 0);
					if (flag)
					{
						result = text;
					}
					else
					{
						result = defaultvalue;
					}
				}
				else
				{
					try
					{
						IEnumerator enumerator = Dt.Rows.GetEnumerator();
						while (enumerator.MoveNext())
						{
							DataRow dataRow = (DataRow)enumerator.Current;
							flag2 = (dataRow[idcolumn] != DBNull.Value);
							if (flag2)
							{
								text = Conversions.ToString(Operators.ConcatenateObject(text, Operators.ConcatenateObject(dataRow[idcolumn], ",")));
							}
						}
					}
					finally
					{
						IEnumerator enumerator;
						flag2 = (enumerator is IDisposable);
						if (flag2)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
					text = Public_Function.RemoveLast(text);
					result = text;
				}
			}
			return result;
		}

		// Token: 0x06000C56 RID: 3158 RVA: 0x0014794C File Offset: 0x00145D4C
		public static string GetID(DataRow[] dr, string IDColumn)
		{
			string text = string.Empty;
			bool flag = dr.Length == 0;
			checked
			{
				string result;
				if (flag)
				{
					result = text;
				}
				else
				{
					for (int i = 0; i < dr.Length; i++)
					{
						DataRow dataRow = dr[i];
						flag = (dataRow[IDColumn] != DBNull.Value);
						if (flag)
						{
							text = Conversions.ToString(Operators.ConcatenateObject(text, Operators.ConcatenateObject(dataRow[IDColumn], ",")));
						}
					}
					text = Public_Function.RemoveLast(text);
					result = text;
				}
				return result;
			}
		}

		// Token: 0x06000C57 RID: 3159 RVA: 0x001479D0 File Offset: 0x00145DD0
		public static string GetUniqueID(DataTable dt, string Column)
		{
			string text = string.Empty;
			List<string> list = new List<string>();
			try
			{
				IEnumerator enumerator = dt.Rows.GetEnumerator();
				while (enumerator.MoveNext())
				{
					DataRow dataRow = (DataRow)enumerator.Current;
					bool flag = dataRow[Column] == DBNull.Value;
					if (!flag)
					{
						flag = !list.Contains(Conversions.ToString(dataRow[Column]));
						if (flag)
						{
							list.Add(Conversions.ToString(dataRow[Column]));
						}
					}
				}
			}
			finally
			{
				IEnumerator enumerator;
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
			try
			{
				List<string>.Enumerator enumerator2 = list.GetEnumerator();
				while (enumerator2.MoveNext())
				{
					string current = enumerator2.Current;
					text = text + current + ",";
				}
			}
			finally
			{
				List<string>.Enumerator enumerator2;
				((IDisposable)enumerator2).Dispose();
			}
			text = Public_Function.RemoveLast(text);
			return text;
		}

		// Token: 0x06000C58 RID: 3160 RVA: 0x00147AEC File Offset: 0x00145EEC
		public static string GetID(List<long> dt)
		{
			string text = string.Empty;
			try
			{
				List<long>.Enumerator enumerator = dt.GetEnumerator();
				while (enumerator.MoveNext())
				{
					long current = enumerator.Current;
					text = text + Conversions.ToString(current) + ",";
				}
			}
			finally
			{
				List<long>.Enumerator enumerator;
				((IDisposable)enumerator).Dispose();
			}
			text = Public_Function.RemoveLast(text);
			return text;
		}

		// Token: 0x06000C59 RID: 3161 RVA: 0x00147B60 File Offset: 0x00145F60
		public static string GetID(List<string> dt)
		{
			string text = string.Empty;
			try
			{
				List<string>.Enumerator enumerator = dt.GetEnumerator();
				while (enumerator.MoveNext())
				{
					string current = enumerator.Current;
					text = text + Public_Function.GetValue(current) + ",";
				}
			}
			finally
			{
				List<string>.Enumerator enumerator;
				((IDisposable)enumerator).Dispose();
			}
			text = Public_Function.RemoveLast(text);
			return text;
		}

		// Token: 0x06000C5A RID: 3162 RVA: 0x00147BD4 File Offset: 0x00145FD4
		public static string RemoveLast(string s)
		{
			bool flag = s == null;
			if (flag)
			{
				s = string.Empty;
			}
			else
			{
				flag = (s.Length > 0);
				if (flag)
				{
					s = s.Remove(checked(s.Length - 1), 1);
				}
			}
			return s;
		}

		// Token: 0x06000C5B RID: 3163 RVA: 0x00147C1C File Offset: 0x0014601C
		public static string RemoveLast(string s, int count)
		{
			bool flag = s == null;
			if (flag)
			{
				s = string.Empty;
			}
			else
			{
				flag = (s.Length > 0);
				if (flag)
				{
					s = s.Remove(checked(s.Length - count), count);
				}
			}
			return s;
		}

		// Token: 0x06000C5C RID: 3164 RVA: 0x00147C64 File Offset: 0x00146064
		public static DialogResult ShowMessage(string Message, MessageBoxButtons Buttons, MessageBoxIcon icon, ErrorListManager ErrorList = null)
		{
			Frm_MessageBox frm_MessageBox = new Frm_MessageBox
			{
				ErrorList = ErrorList
			};
			frm_MessageBox.Label1.Text = Message;
			switch (Buttons)
			{
			case MessageBoxButtons.OK:
				frm_MessageBox.btn_ok.Visible = true;
				break;
			case MessageBoxButtons.OKCancel:
				frm_MessageBox.btn_ok.Visible = true;
				frm_MessageBox.btn_cancel.Visible = true;
				break;
			case MessageBoxButtons.YesNoCancel:
				frm_MessageBox.btn_yes.Visible = true;
				frm_MessageBox.btn_no.Visible = true;
				frm_MessageBox.UiButton2.Visible = true;
				break;
			case MessageBoxButtons.YesNo:
				frm_MessageBox.btn_yes.Visible = true;
				frm_MessageBox.btn_no.Visible = true;
				break;
			}
			bool flag = icon == MessageBoxIcon.Asterisk;
			if (flag)
			{
				frm_MessageBox.pic_info.Visible = true;
			}
			else
			{
				flag = (icon == MessageBoxIcon.Hand);
				if (flag)
				{
					frm_MessageBox.pic_error.Visible = true;
				}
				else
				{
					flag = (icon == MessageBoxIcon.Question);
					if (flag)
					{
						frm_MessageBox.pic_question.Visible = true;
					}
					else
					{
						flag = (icon == MessageBoxIcon.Exclamation);
						if (flag)
						{
							frm_MessageBox.pic_warning.Visible = true;
						}
					}
				}
			}
			return frm_MessageBox.ShowDialog();
		}

		// Token: 0x06000C5D RID: 3165 RVA: 0x00147DA0 File Offset: 0x001461A0
		public static DialogResult ConfirmUpdate()
		{
			return Public_Function.ShowMessage("آیا مایل به اصلاح اطلاعات میباشید؟", MessageBoxButtons.YesNo, MessageBoxIcon.Question, null);
		}

		// Token: 0x06000C5E RID: 3166 RVA: 0x00147DC0 File Offset: 0x001461C0
		public static DialogResult ConfirmDelete()
		{
			return Public_Function.ShowMessage("آیا مایل به حذف اطلاعات میباشید؟", MessageBoxButtons.YesNo, MessageBoxIcon.Question, null);
		}

		// Token: 0x06000C5F RID: 3167 RVA: 0x00147DE0 File Offset: 0x001461E0
		public static DialogResult ConfirmDeleteAction()
		{
			return Public_Function.ShowMessage("اطلاعات مورد نظر با موفقیت حذف گردید", MessageBoxButtons.OK, MessageBoxIcon.Asterisk, null);
		}

		// Token: 0x06000C60 RID: 3168 RVA: 0x00147E00 File Offset: 0x00146200
		public static DialogResult ConfirmInsert()
		{
			return Public_Function.ShowMessage("اطلاعات مورد نظر ثبت گردید", MessageBoxButtons.OK, MessageBoxIcon.Asterisk, null);
		}

		// Token: 0x06000C61 RID: 3169 RVA: 0x00147E20 File Offset: 0x00146220
		public static void HighlightCell(GridEX grid, string Value)
		{
			GridEXRow[] rows = grid.GetRows();
			checked
			{
				for (int i = 0; i < rows.Length; i++)
				{
					GridEXRow gridEXRow = rows[i];
					try
					{
						IEnumerator enumerator = ((IEnumerable)gridEXRow.Cells).GetEnumerator();
						while (enumerator.MoveNext())
						{
							GridEXCell gridEXCell = (GridEXCell)enumerator.Current;
							bool flag = gridEXCell.Value != null;
							bool flag2;
							if (flag)
							{
								flag2 = gridEXCell.Value.ToString().Contains(Value);
								if (flag2)
								{
									gridEXCell.FormatStyle = new GridEXFormatStyle();
									gridEXCell.FormatStyle.BackColor = Color.Khaki;
								}
							}
							flag2 = gridEXCell.Text.Contains(Value);
							if (flag2)
							{
								gridEXCell.FormatStyle = new GridEXFormatStyle();
								gridEXCell.FormatStyle.BackColor = Color.Khaki;
							}
						}
					}
					finally
					{
						IEnumerator enumerator;
						bool flag2 = enumerator is IDisposable;
						if (flag2)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		// Token: 0x06000C62 RID: 3170 RVA: 0x00147F34 File Offset: 0x00146334
		public static string ShamsiToMiladi(string datefa)
		{
			bool flag = Operators.CompareString(datefa, string.Empty, false) == 0;
			string result;
			if (flag)
			{
				result = string.Empty;
			}
			else
			{
				PersianCalendar persianCalendar = new PersianCalendar();
				string[] array = datefa.Split(new char[]
				{
					'/'
				});
				result = persianCalendar.ToDateTime(Conversions.ToInteger(array[0]), Conversions.ToInteger(array[1]), Conversions.ToInteger(array[2]), 0, 0, 0, 0).ToShortDateString();
			}
			return result;
		}

		// Token: 0x06000C63 RID: 3171 RVA: 0x00147FAC File Offset: 0x001463AC
		public static string MiladiToShamsi(DateTime datetime)
		{
			PersianCalendar persianCalendar = new PersianCalendar();
			return string.Concat(new string[]
			{
				Conversions.ToString(persianCalendar.GetYear(datetime)),
				"/",
				Strings.Format(persianCalendar.GetMonth(datetime), "00"),
				"/",
				Strings.Format(persianCalendar.GetDayOfMonth(datetime), "00")
			});
		}

		// Token: 0x06000C64 RID: 3172 RVA: 0x00148028 File Offset: 0x00146428
		public static bool IsValidShamsiDate(string datefa)
		{
			bool flag = Operators.CompareString(datefa, string.Empty, false) == 0;
			bool result;
			if (flag)
			{
				result = true;
			}
			else
			{
				try
				{
					PersianCalendar persianCalendar = new PersianCalendar();
					string[] array = datefa.Split(new char[]
					{
						'/'
					});
					persianCalendar.ToDateTime(Conversions.ToInteger(array[0]), Conversions.ToInteger(array[1]), Conversions.ToInteger(array[2]), 0, 0, 0, 0);
					result = true;
				}
				catch (Exception expr_62)
				{
					ProjectData.SetProjectError(expr_62);
					result = false;
					ProjectData.ClearProjectError();
				}
			}
			return result;
		}

		// Token: 0x06000C65 RID: 3173 RVA: 0x001480C4 File Offset: 0x001464C4
		public static bool HasNull(Control control)
		{
			bool result;
			try
			{
				IEnumerator enumerator = control.Controls.GetEnumerator();
				while (enumerator.MoveNext())
				{
					Control control2 = (Control)enumerator.Current;
					bool flag = control2 is DateBox;
					bool flag2;
					if (flag)
					{
						flag2 = ((DateBox)control2).NullCheck();
						if (flag2)
						{
							result = true;
							return result;
						}
					}
					flag2 = (control2 is EditBox);
					if (flag2)
					{
						flag = ((EditBox)control2).NullCheck();
						if (flag)
						{
							result = true;
							return result;
						}
					}
					flag2 = (control2 is CurrencyBox);
					if (flag2)
					{
						flag = ((CurrencyBox)control2).NullCheck();
						if (flag)
						{
							result = true;
							return result;
						}
					}
					flag2 = (control2 is NumericBox);
					if (flag2)
					{
						flag = ((NumericBox)control2).NullCheck();
						if (flag)
						{
							result = true;
							return result;
						}
					}
					flag2 = (control2 is ComboBox);
					if (flag2)
					{
						flag = ((ComboBox)control2).NullCheck();
						if (flag)
						{
							result = true;
							return result;
						}
					}
					flag2 = (control2 is SelectItem);
					if (flag2)
					{
						flag = ((SelectItem)control2).NullCheck();
						if (flag)
						{
							result = true;
							return result;
						}
					}
					flag2 = Public_Function.HasNull(control2);
					if (flag2)
					{
						result = true;
						return result;
					}
				}
			}
			finally
			{
				IEnumerator enumerator;
				bool flag2 = enumerator is IDisposable;
				if (flag2)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
			result = false;
			return result;
		}

		// Token: 0x06000C66 RID: 3174 RVA: 0x0014823C File Offset: 0x0014663C
		public static void SetNew(Control control)
		{
			try
			{
				IEnumerator enumerator = control.Controls.GetEnumerator();
				while (enumerator.MoveNext())
				{
					Control control2 = (Control)enumerator.Current;
					bool flag = control2 is EditBox;
					if (flag)
					{
						((EditBox)control2).SetNew();
					}
					flag = (control2 is SelectItem);
					if (flag)
					{
						((SelectItem)control2).SetNew();
					}
					flag = (control2 is NumericBox);
					if (flag)
					{
						((NumericBox)control2).SetNew();
					}
					flag = (control2 is CurrencyBox);
					if (flag)
					{
						((CurrencyBox)control2).SetNew();
					}
					flag = (control2 is ComboBox);
					if (flag)
					{
						((ComboBox)control2).SetNew();
					}
					flag = (control2 is DateBox2);
					if (flag)
					{
						((DateBox2)control2).SetNew();
					}
					flag = (control2.Controls.Count > 0);
					if (flag)
					{
						Public_Function.SetNew(control2);
					}
				}
			}
			finally
			{
				IEnumerator enumerator;
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		// Token: 0x06000C67 RID: 3175 RVA: 0x00148360 File Offset: 0x00146760
		public static string GetMonthName(int Month_Id)
		{
			return Public_Function.MonthName[Month_Id];
		}

		// Token: 0x06000C68 RID: 3176 RVA: 0x0014837C File Offset: 0x0014677C
		public static string GetDayName(int day)
		{
			return Public_Function.DayName[day];
		}

		// Token: 0x06000C69 RID: 3177 RVA: 0x00148398 File Offset: 0x00146798
		public static void validateTwoControl(Control ctl1, Control ctl2)
		{
			bool flag = Operators.CompareString(ctl1.Text, string.Empty, false) == 0;
			bool flag2;
			if (flag)
			{
				flag2 = (Operators.CompareString(ctl2.Text, string.Empty, false) != 0);
				if (!flag2)
				{
					return;
				}
				ctl1.Text = ctl2.Text;
			}
			flag2 = (Operators.CompareString(ctl2.Text, string.Empty, false) == 0);
			if (flag2)
			{
				flag = (Operators.CompareString(ctl1.Text, string.Empty, false) != 0);
				if (!flag)
				{
					return;
				}
				ctl2.Text = ctl1.Text;
			}
			flag2 = (Conversions.ToLong(ctl1.Text) > Conversions.ToLong(ctl2.Text));
			if (flag2)
			{
				ctl1.Tag = ctl1.Text;
				ctl1.Text = ctl2.Text;
				ctl2.Text = Conversions.ToString(ctl1.Tag);
			}
		}

		// Token: 0x06000C6A RID: 3178 RVA: 0x00148484 File Offset: 0x00146884
		public static void ShowTip(Control control, string Text)
		{
			control.Focus();
			JanusSuperTip janusSuperTip = new JanusSuperTip();
			janusSuperTip.RightToLeft = true;
			janusSuperTip.AutoPopDelay = 0;
			janusSuperTip.InitialDelay = 0;
			janusSuperTip.Font = new Font("Tahoma", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 178);
			SuperTipSettings superTipSettings = new SuperTipSettings();
			superTipSettings.HeaderImage = Resources.onebit_36;
			superTipSettings.HeaderText = "خطا";
			superTipSettings.Text = Text;
			Rectangle bounds = control.Bounds;
			bounds.Location = control.Parent.PointToScreen(bounds.Location);
			JanusSuperTip arg_AA_0 = janusSuperTip;
			SuperTipSettings arg_AA_1 = superTipSettings;
			Point position = new Point(bounds.Left, bounds.Bottom);
			arg_AA_0.Show(arg_AA_1, control, position, 2500);
		}

		// Token: 0x06000C6B RID: 3179 RVA: 0x00148544 File Offset: 0x00146944
		public static void GridRaiseSoftError(GridEX grid, GridEXRow row, string Column, string NullToolTipText)
		{
			grid.Row = row.Position;
			JanusSuperTip janusSuperTip = new JanusSuperTip();
			janusSuperTip.BodyWidth = 250;
			janusSuperTip.RightToLeft = true;
			janusSuperTip.AutoPopDelay = 0;
			janusSuperTip.InitialDelay = 0;
			janusSuperTip.Font = new Font("Tahoma", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 178);
			SuperTipSettings superTipSettings = new SuperTipSettings();
			superTipSettings.Text = NullToolTipText;
			Rectangle cellBounds = grid.GetCellBounds(grid.Row, grid.RootTable.Columns[Column].Position);
			Rectangle bounds = grid.Bounds;
			bounds.Location = grid.Parent.PointToScreen(bounds.Location);
			superTipSettings.HeaderImage = Resources.onebit_36;
			superTipSettings.HeaderText = "خطا";
			grid.Focus();
			grid.Col = grid.RootTable.Columns[Column].Position;
			grid.EditMode = EditMode.EditOn;
			JanusSuperTip arg_11B_0 = janusSuperTip;
			SuperTipSettings arg_11B_1 = superTipSettings;
			Point position = checked(new Point(bounds.Left + cellBounds.Left, bounds.Top + cellBounds.Bottom));
			arg_11B_0.Show(arg_11B_1, grid, position, 2500);
		}

		// Token: 0x06000C6C RID: 3180 RVA: 0x00148674 File Offset: 0x00146A74
		public static void SetFarsi()
		{
			try
			{
				try
				{
					IEnumerator enumerator = InputLanguage.InstalledInputLanguages.GetEnumerator();
					while (enumerator.MoveNext())
					{
						InputLanguage inputLanguage = (InputLanguage)enumerator.Current;
						bool flag = Operators.CompareString(inputLanguage.Culture.Name.ToLower(), "fa-ir", false) == 0;
						if (flag)
						{
							Application.CurrentInputLanguage = inputLanguage;
						}
					}
				}
				finally
				{
					IEnumerator enumerator;
					bool flag = enumerator is IDisposable;
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
			catch (Exception expr_74)
			{
				ProjectData.SetProjectError(expr_74);
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06000C6D RID: 3181 RVA: 0x00148724 File Offset: 0x00146B24
		public static void SetEnglish()
		{
			try
			{
				try
				{
					IEnumerator enumerator = InputLanguage.InstalledInputLanguages.GetEnumerator();
					while (enumerator.MoveNext())
					{
						InputLanguage inputLanguage = (InputLanguage)enumerator.Current;
						bool flag = Operators.CompareString(inputLanguage.Culture.Name.ToLower(), "en-us", false) == 0;
						if (flag)
						{
							Application.CurrentInputLanguage = inputLanguage;
						}
					}
				}
				finally
				{
					IEnumerator enumerator;
					bool flag = enumerator is IDisposable;
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
			catch (Exception expr_74)
			{
				ProjectData.SetProjectError(expr_74);
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06000C6E RID: 3182 RVA: 0x001487D4 File Offset: 0x00146BD4
		public static string ToFarsis(string s)
		{
			bool flag = Operators.CompareString(s, string.Empty, false) == 0;
			string result;
			if (flag)
			{
				result = " ";
			}
			else
			{
				result = "{tofarsis(" + s + ")}";
			}
			return result;
		}

		// Token: 0x06000C6F RID: 3183 RVA: 0x00148814 File Offset: 0x00146C14
		public static string ToFarsi(string s)
		{
			string text = "1234567890";
			char[] array = s.ToCharArray(0, s.Length);
			string text2 = string.Empty;
			int arg_26_0 = 0;
			checked
			{
				int num = s.Length - 1;
				int num2 = arg_26_0;
				while (true)
				{
					int arg_7B_0 = num2;
					int num3 = num;
					if (arg_7B_0 > num3)
					{
						break;
					}
					bool flag = text.IndexOf(array[num2]) == -1;
					if (flag)
					{
						text2 += Conversions.ToString(array[num2]);
					}
					else
					{
						text2 += Conversions.ToString(Strings.ChrW((int)(array[num2] + 'ۀ')));
					}
					num2++;
				}
				return text2;
			}
		}

		// Token: 0x06000C70 RID: 3184 RVA: 0x001488A4 File Offset: 0x00146CA4
		public static void InvokeMethod(string methodName)
		{
		}

		// Token: 0x06000C71 RID: 3185 RVA: 0x001488A8 File Offset: 0x00146CA8
		public static void InvokeMethod(string OwnerFrm, string methodName, object[] Parameters)
		{
		}

		// Token: 0x06000C72 RID: 3186 RVA: 0x001488AC File Offset: 0x00146CAC
		public static string GetSum(DataTable dt, string field)
		{
			bool flag = dt == null;
			string result;
			if (flag)
			{
				result = Conversions.ToString(0);
			}
			else
			{
				decimal num = 0m;
				try
				{
					IEnumerator enumerator = dt.Rows.GetEnumerator();
					while (enumerator.MoveNext())
					{
						DataRow dataRow = (DataRow)enumerator.Current;
						flag = (dataRow[field] != DBNull.Value);
						if (flag)
						{
							num = Conversions.ToDecimal(Operators.AddObject(num, dataRow[field]));
						}
					}
				}
				finally
				{
					IEnumerator enumerator;
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
				result = Conversions.ToString(num);
			}
			return result;
		}

		// Token: 0x06000C73 RID: 3187 RVA: 0x00148970 File Offset: 0x00146D70
		public static string GetSum(DataRow[] dr, string field)
		{
			bool flag = dr == null;
			checked
			{
				string result;
				if (flag)
				{
					result = Conversions.ToString(0);
				}
				else
				{
					flag = (dr.Length == 0);
					if (flag)
					{
						result = Conversions.ToString(0);
					}
					else
					{
						decimal num = 0m;
						for (int i = 0; i < dr.Length; i++)
						{
							DataRow dataRow = dr[i];
							flag = (dataRow[field] != DBNull.Value);
							if (flag)
							{
								num = Conversions.ToDecimal(Operators.AddObject(num, dataRow[field]));
							}
						}
						result = Conversions.ToString(num);
					}
				}
				return result;
			}
		}

		// Token: 0x06000C74 RID: 3188 RVA: 0x00148A08 File Offset: 0x00146E08
		public static int GetRandom(int Min, int Max)
		{
			Random random = new Random();
			Random random2 = new Random(random.Next(0, 1000));
			return random2.Next(Min, Max);
		}

		// Token: 0x040004BE RID: 1214
		[CompilerGenerated]
		private static SqlConnection _Connection;

		// Token: 0x040004BF RID: 1215
		[CompilerGenerated]
		private static CurrentData _CurrentData;

		// Token: 0x040004C0 RID: 1216
		[CompilerGenerated]
		private static string _Server;

		// Token: 0x040004C1 RID: 1217
		[CompilerGenerated]
		private static string _SQLInstance;

		// Token: 0x040004C2 RID: 1218
		public static Dictionary<string, string> dict;

		// Token: 0x040004C3 RID: 1219
		public static DataTable Dt_FrmSize;

		// Token: 0x040004C4 RID: 1220
		private static string[] DayName;

		// Token: 0x040004C5 RID: 1221
		private static string[] MonthName;

		// Token: 0x040004C6 RID: 1222
		[CompilerGenerated]
		private static int _AppType;

		// Token: 0x0200008C RID: 140
		public enum OperandType
		{
			// Token: 0x040004D7 RID: 1239
			where = 1,
			// Token: 0x040004D8 RID: 1240
			AND_,
			// Token: 0x040004D9 RID: 1241
			OR_
		}
	}
}
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;

namespace FruitBox.My
{
	// Token: 0x02000002 RID: 2
	[GeneratedCode("MyTemplate", "8.0.0.0"), EditorBrowsable(EditorBrowsableState.Never)]
	internal class MyApplication : WindowsFormsApplicationBase
	{
		// Token: 0x06000002 RID: 2 RVA: 0x0014D5D8 File Offset: 0x0014B9D8
		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = MyApplication.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = MyApplication.__ENCList.Count == MyApplication.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = MyApplication.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = MyApplication.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									MyApplication.__ENCList[num] = MyApplication.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						MyApplication.__ENCList.RemoveRange(num, MyApplication.__ENCList.Count - num);
						MyApplication.__ENCList.Capacity = MyApplication.__ENCList.Count;
					}
					MyApplication.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		// Token: 0x06000003 RID: 3 RVA: 0x0014D6DC File Offset: 0x0014BADC
		[DebuggerHidden, STAThread, EditorBrowsable(EditorBrowsableState.Advanced)]
		[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
		internal static void Main(string[] Args)
		{
			try
			{
				Application.SetCompatibleTextRenderingDefault(WindowsFormsApplicationBase.UseCompatibleTextRendering);
			}
			finally
			{
			}
			MyProject.Application.Run(Args);
		}

		// Token: 0x06000004 RID: 4 RVA: 0x0014D718 File Offset: 0x0014BB18
		[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
		private void ShowSplash1()
		{
			bool flag = !File.Exists(Public_Function.Startup_Path() + "\\server.txt");
			if (flag)
			{
				Public_Function.Server = ".";
				Public_Function.SQLInstance = "\\fruitbox";
			}
			else
			{
				string[] array = File.ReadAllLines(Public_Function.Startup_Path() + "\\server.txt");
				flag = (array.Length > 0);
				if (flag)
				{
					Public_Function.Server = array[0];
				}
				flag = (array.Length > 1);
				if (flag)
				{
					Public_Function.SQLInstance = "\\" + array[1];
				}
			}
			Frm_Splash frm_Splash = new Frm_Splash();
			frm_Splash.Show();
			bool flag2 = false;
			MyProject.Application.DoEvents();
			try
			{
				CultureInfo currentCulture = new CultureInfo("en-US", false);
				Thread.CurrentThread.CurrentCulture = currentCulture;
				flag = !Public_Function.DBExist();
				if (flag)
				{
					frm_Splash.Label1.Text = "مقدار دهی اولیه";
					flag2 = true;
					Public_Function.FirstRun();
				}
				frm_Splash.Label1.Text = "اتصال به پایگاه داده";
				frm_Splash.Label1.Refresh();
				flag = !File.Exists(Public_Function.Startup_Path() + "\\db.txt");
				if (flag)
				{
					Public_Function.Connection = new SqlConnection("Data Source=" + Public_Function.Server + Public_Function.SQLInstance + ";Initial Catalog=master;Persist Security Info=True;User ID=sa;Password=1");
					Public_Function.Connection.Open();
					DataTable dataTable = Public_Function.FillData("select * from sys.databases where name like 'fruitbox%' order by name");
					try
					{
						IEnumerator enumerator = dataTable.Rows.GetEnumerator();
						while (enumerator.MoveNext())
						{
							DataRow dataRow = (DataRow)enumerator.Current;
							MyProject.Forms.Form_Main.txt_database.Items.Add(Conversions.ToString(dataRow["name"]), RuntimeHelpers.GetObjectValue(dataRow["name"]));
						}
					}
					finally
					{
						IEnumerator enumerator;
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
					flag = (dataTable.Rows.Count == 1);
					if (flag)
					{
						MyProject.Forms.Form_Main.Label9.Visible = false;
						MyProject.Forms.Form_Main.txt_database.Visible = false;
					}
					else
					{
						MyProject.Forms.Form_Main.Label9.Visible = true;
						MyProject.Forms.Form_Main.txt_database.Visible = true;
					}
					Public_Function.Connection.Close();
				}
				else
				{
					string[] array2 = File.ReadAllLines(Public_Function.Startup_Path() + "\\db.txt");
					flag = (array2.Length > 0);
					if (flag)
					{
						MyProject.Forms.Form_Main.txt_database.Items.Add(array2[0], array2[0]);
						MyProject.Forms.Form_Main.Label9.Visible = false;
						MyProject.Forms.Form_Main.txt_database.Visible = false;
					}
				}
				MyProject.Forms.Form_Main.txt_database.SelectedValueChanged -= new EventHandler(MyProject.Forms.Form_Main.txt_database_SelectedValueChanged);
				MyProject.Forms.Form_Main.txt_database.SelectedIndex = checked(MyProject.Forms.Form_Main.txt_database.Items.Count - 1);
				MyProject.Forms.Form_Main.txt_database.SelectedValueChanged += new EventHandler(MyProject.Forms.Form_Main.txt_database_SelectedValueChanged);
				Public_Function.Connection = new SqlConnection(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("Data Source=" + Public_Function.Server + Public_Function.SQLInstance + ";Initial Catalog=", MyProject.Forms.Form_Main.txt_database.SelectedValue), ";Persist Security Info=True;User ID=sa;Password=1")));
				Public_Function.Connection.Open();
				flag = flag2;
				if (flag)
				{
					CreateDB createDB = new CreateDB();
					createDB.init_first_db();
				}
				frm_Splash.Label1.Text = "بارگذاری تنظیمات برنامه";
				frm_Splash.Label1.Refresh();
				Public_Function.LoadApplicationSetting();
				flag = Public_Function.dict.ContainsKey("hlt");
				bool flag4;
				if (flag)
				{
					bool flag3 = Conversions.ToBoolean(Public_Function.dict["hlt"]);
					if (flag3)
					{
						try
						{
							flag4 = File.Exists(Public_Function.Startup_Path() + "\\fr.snk");
							if (flag4)
							{
								File.Delete(Public_Function.Startup_Path() + "\\fr.snk");
							}
						}
						catch (Exception expr_45E)
						{
							ProjectData.SetProjectError(expr_45E);
							ProjectData.ClearProjectError();
						}
						Application.Exit();
						ProjectData.EndApp();
					}
				}
				frm_Splash.lbl_owner.Text = Public_Function.dict["owner"];
				frm_Splash.lbl_owner.Refresh();
				frm_Splash.Label1.Text = "بارگذاری اطلاعات پایه";
				frm_Splash.Label1.Refresh();
				AppRun appRun = new AppRun();
				appRun.mmm();
				Initdb initdb = new Initdb();
				initdb.InitDb1();
				initdb.initdb2();
				initdb.InitDB3();
				initdb.Create_Deleted_Objects();
				initdb.Initdir();
				flag4 = Conversions.ToBoolean(Public_Function.dict["fullscreen"]);
				if (flag4)
				{
					MyProject.Forms.Form_Main.FormBorderStyle = FormBorderStyle.None;
				}
				else
				{
					MyProject.Forms.Form_Main.FormBorderStyle = FormBorderStyle.Sizable;
				}
				flag4 = Conversions.ToBoolean(Public_Function.dict["showstatus"]);
				if (flag4)
				{
					MyProject.Forms.Form_Main.RibbonStatusBar1.Visible = true;
				}
				else
				{
					MyProject.Forms.Form_Main.RibbonStatusBar1.Visible = false;
				}
				MyProject.Application.MainForm = MyProject.Forms.Form_Main;
				frm_Splash.Close();
			}
			catch (Exception expr_5A5)
			{
				ProjectData.SetProjectError(expr_5A5);
				Exception ex = expr_5A5;
				Public_Function.ShowMessage(ex.Message, MessageBoxButtons.OK, MessageBoxIcon.Asterisk, null);
				MyProject.Application.MainForm = MyProject.Forms.Frm_Connect;
				MyProject.Forms.Frm_Connect.Show();
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06000005 RID: 5 RVA: 0x0014DD60 File Offset: 0x0014C160
		[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
		private void ShowSplash2()
		{
			bool flag = !File.Exists(Public_Function.Startup_Path() + "\\server.txt");
			if (flag)
			{
				Public_Function.Server = ".";
				Public_Function.SQLInstance = "\\fruitbox";
			}
			else
			{
				string[] array = File.ReadAllLines(Public_Function.Startup_Path() + "\\server.txt");
				flag = (array.Length > 0);
				if (flag)
				{
					Public_Function.Server = array[0];
				}
				flag = (array.Length > 1);
				if (flag)
				{
					Public_Function.SQLInstance = "\\" + array[1];
				}
			}
			Frm_Splash2 frm_Splash = new Frm_Splash2();
			frm_Splash.Show();
			bool flag2 = false;
			MyProject.Application.DoEvents();
			try
			{
				CultureInfo currentCulture = new CultureInfo("en-US", false);
				Thread.CurrentThread.CurrentCulture = currentCulture;
				flag = !Public_Function.DBExist();
				if (flag)
				{
					frm_Splash.Label1.Text = "مقدار دهی اولیه";
					flag2 = true;
					Public_Function.FirstRun();
				}
				frm_Splash.Label1.Text = "اتصال به پایگاه داده";
				frm_Splash.Label1.Refresh();
				Public_Function.Connection = new SqlConnection("Data Source=" + Public_Function.Server + Public_Function.SQLInstance + ";Initial Catalog=master;Persist Security Info=True;User ID=sa;Password=1");
				Public_Function.Connection.Open();
				DataTable dataTable = Public_Function.FillData("select * from sys.databases where name like 'fruitbox%' order by name");
				try
				{
					IEnumerator enumerator = dataTable.Rows.GetEnumerator();
					while (enumerator.MoveNext())
					{
						DataRow dataRow = (DataRow)enumerator.Current;
						MyProject.Forms.Form_Main.txt_database.Items.Add(Conversions.ToString(dataRow["name"]), RuntimeHelpers.GetObjectValue(dataRow["name"]));
					}
				}
				finally
				{
					IEnumerator enumerator;
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
				flag = (dataTable.Rows.Count == 1);
				if (flag)
				{
					MyProject.Forms.Form_Main.Label9.Visible = false;
					MyProject.Forms.Form_Main.txt_database.Visible = false;
				}
				else
				{
					MyProject.Forms.Form_Main.Label9.Visible = true;
					MyProject.Forms.Form_Main.txt_database.Visible = true;
				}
				MyProject.Forms.Form_Main.txt_database.SelectedValueChanged -= new EventHandler(MyProject.Forms.Form_Main.txt_database_SelectedValueChanged);
				MyProject.Forms.Form_Main.txt_database.SelectedIndex = checked(MyProject.Forms.Form_Main.txt_database.Items.Count - 1);
				MyProject.Forms.Form_Main.txt_database.SelectedValueChanged += new EventHandler(MyProject.Forms.Form_Main.txt_database_SelectedValueChanged);
				Public_Function.Connection.Close();
				Public_Function.Connection = new SqlConnection(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("Data Source=" + Public_Function.Server + Public_Function.SQLInstance + ";Initial Catalog=", MyProject.Forms.Form_Main.txt_database.SelectedValue), ";Persist Security Info=True;User ID=sa;Password=1")));
				Public_Function.Connection.Open();
				flag = flag2;
				if (flag)
				{
					CreateDB createDB = new CreateDB();
					createDB.init_first_db();
				}
				frm_Splash.Label1.Text = "بارگذاری تنظیمات برنامه";
				frm_Splash.Label1.Refresh();
				Public_Function.LoadApplicationSetting();
				flag = Public_Function.dict.ContainsKey("hlt");
				bool flag4;
				if (flag)
				{
					bool flag3 = Conversions.ToBoolean(Public_Function.dict["hlt"]);
					if (flag3)
					{
						try
						{
							flag4 = File.Exists(Public_Function.Startup_Path() + "\\fr.snk");
							if (flag4)
							{
								File.Delete(Public_Function.Startup_Path() + "\\fr.snk");
							}
						}
						catch (Exception expr_3C8)
						{
							ProjectData.SetProjectError(expr_3C8);
							ProjectData.ClearProjectError();
						}
						Application.Exit();
						ProjectData.EndApp();
					}
				}
				frm_Splash.lbl_owner.Text = Public_Function.dict["owner"];
				frm_Splash.lbl_owner.Refresh();
				frm_Splash.Label1.Text = "بارگذاری اطلاعات پایه";
				frm_Splash.Label1.Refresh();
				AppRun appRun = new AppRun();
				appRun.mmm2();
				Initdb initdb = new Initdb();
				initdb.InitDb1();
				initdb.initdb2();
				initdb.InitDB3();
				initdb.Initdir();
				flag4 = Conversions.ToBoolean(Public_Function.dict["fullscreen"]);
				if (flag4)
				{
					MyProject.Forms.Form_Main.FormBorderStyle = FormBorderStyle.None;
				}
				else
				{
					MyProject.Forms.Form_Main.FormBorderStyle = FormBorderStyle.Sizable;
				}
				flag4 = Conversions.ToBoolean(Public_Function.dict["showstatus"]);
				if (flag4)
				{
					MyProject.Forms.Form_Main.RibbonStatusBar1.Visible = true;
				}
				else
				{
					MyProject.Forms.Form_Main.RibbonStatusBar1.Visible = false;
				}
				MyProject.Application.MainForm = MyProject.Forms.Form_Main;
				frm_Splash.Close();
			}
			catch (Exception expr_507)
			{
				ProjectData.SetProjectError(expr_507);
				Exception ex = expr_507;
				Public_Function.ShowMessage(ex.Message, MessageBoxButtons.OK, MessageBoxIcon.Asterisk, null);
				MyProject.Application.MainForm = MyProject.Forms.Frm_Connect;
				MyProject.Forms.Frm_Connect.Show();
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06000006 RID: 6 RVA: 0x0014E308 File Offset: 0x0014C708
		private void MyApplication_Startup(object sender, StartupEventArgs e)
		{
			bool flag = Public_Function.AppType == 1 | Public_Function.AppType == 3;
			if (flag)
			{
				this.ShowSplash1();
			}
			else
			{
				this.ShowSplash2();
			}
		}

		// Token: 0x06000007 RID: 7 RVA: 0x0014E340 File Offset: 0x0014C740
		private void MyApplication_StartupNextInstance(object sender, StartupNextInstanceEventArgs e)
		{
		}

		// Token: 0x06000008 RID: 8 RVA: 0x0014E344 File Offset: 0x0014C744
		[DebuggerStepThrough]
		public MyApplication() : base(AuthenticationMode.Windows)
		{
			base.Startup += new StartupEventHandler(this.MyApplication_Startup);
			base.StartupNextInstance += new StartupNextInstanceEventHandler(this.MyApplication_StartupNextInstance);
			MyApplication.__ENCAddToList(this);
			this.IsSingleInstance = true;
			this.EnableVisualStyles = true;
			this.SaveMySettingsOnExit = true;
			this.ShutdownStyle = ShutdownMode.AfterAllFormsClose;
		}

		// Token: 0x06000009 RID: 9 RVA: 0x0014E3AC File Offset: 0x0014C7AC
		[DebuggerStepThrough]
		protected override void OnCreateMainForm()
		{
			this.MainForm = MyProject.Forms.Form_Main;
		}

		// Token: 0x04000001 RID: 1
		private static List<WeakReference> __ENCList = new List<WeakReference>();
	}
}
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using Janus.Windows.EditControls;
using Janus.Windows.UI;
using Janus.Windows.UI.Dock;
using Microsoft.VisualBasic.CompilerServices;

namespace FruitBox
{
	// Token: 0x02000079 RID: 121
	[DesignerGenerated]
	public class Frm_Secure : Form
	{
		// Token: 0x060009E5 RID: 2533 RVA: 0x0018BFE4 File Offset: 0x0018A3E4
		[DebuggerNonUserCode]
		public Frm_Secure()
		{
			base.FormClosing += new FormClosingEventHandler(this.Frm_Secure_FormClosing);
			Frm_Secure.__ENCAddToList(this);
			this.InitializeComponent();
		}

		// Token: 0x060009E6 RID: 2534 RVA: 0x0018C010 File Offset: 0x0018A410
		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Secure.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Secure.__ENCList.Count == Frm_Secure.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Secure.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Secure.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Secure.__ENCList[num] = Frm_Secure.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Secure.__ENCList.RemoveRange(num, Frm_Secure.__ENCList.Count - num);
						Frm_Secure.__ENCList.Capacity = Frm_Secure.__ENCList.Count;
					}
					Frm_Secure.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		// Token: 0x060009E7 RID: 2535 RVA: 0x0018C114 File Offset: 0x0018A514
		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		// Token: 0x060009E8 RID: 2536 RVA: 0x0018C164 File Offset: 0x0018A564
		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_Secure));
			this.UiGroupBox1 = new UIGroupBox();
			this.UiGroupBox2 = new UIGroupBox();
			this.Label7 = new Label();
			this.Label8 = new Label();
			this.PictureBox1 = new PictureBox();
			this.UiButton2 = new UIButton();
			this.UiButton1 = new UIButton();
			this.Label6 = new Label();
			this.Label5 = new Label();
			this.Label4 = new Label();
			this.Label3 = new Label();
			this.Label1 = new Label();
			this.Label2 = new Label();
			((ISupportInitialize)this.UiGroupBox1).BeginInit();
			this.UiGroupBox1.SuspendLayout();
			((ISupportInitialize)this.UiGroupBox2).BeginInit();
			this.UiGroupBox2.SuspendLayout();
			((ISupportInitialize)this.PictureBox1).BeginInit();
			this.SuspendLayout();
			this.UiGroupBox1.BackgroundStyle = BackgroundStyle.Panel;
			this.UiGroupBox1.Controls.Add(this.UiGroupBox2);
			this.UiGroupBox1.Dock = DockStyle.Fill;
			this.UiGroupBox1.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, 178);
			this.UiGroupBox1.FrameStyle = Janus.Windows.EditControls.FrameStyle.None;
			Control arg_161_0 = this.UiGroupBox1;
			Point location = new Point(0, 0);
			arg_161_0.Location = location;
			this.UiGroupBox1.Name = "UiGroupBox1";
			Control arg_192_0 = this.UiGroupBox1;
			Size size = new Size(685, 512);
			arg_192_0.Size = size;
			this.UiGroupBox1.TabIndex = 0;
			this.UiGroupBox1.VisualStyle = PanelVisualStyle.Office2010;
			this.UiGroupBox2.BackgroundStyle = BackgroundStyle.Panel;
			this.UiGroupBox2.Controls.Add(this.Label7);
			this.UiGroupBox2.Controls.Add(this.Label8);
			this.UiGroupBox2.Controls.Add(this.PictureBox1);
			this.UiGroupBox2.Controls.Add(this.UiButton2);
			this.UiGroupBox2.Controls.Add(this.UiButton1);
			this.UiGroupBox2.Controls.Add(this.Label6);
			this.UiGroupBox2.Controls.Add(this.Label5);
			this.UiGroupBox2.Controls.Add(this.Label4);
			this.UiGroupBox2.Controls.Add(this.Label3);
			this.UiGroupBox2.Controls.Add(this.Label1);
			this.UiGroupBox2.Controls.Add(this.Label2);
			Control arg_2CE_0 = this.UiGroupBox2;
			location = new Point(12, 3);
			arg_2CE_0.Location = location;
			this.UiGroupBox2.Name = "UiGroupBox2";
			Control arg_2FF_0 = this.UiGroupBox2;
			size = new Size(661, 497);
			arg_2FF_0.Size = size;
			this.UiGroupBox2.TabIndex = 1;
			this.UiGroupBox2.VisualStyle = PanelVisualStyle.Office2010;
			this.Label7.AutoSize = true;
			this.Label7.BackColor = Color.Transparent;
			this.Label7.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_378_0 = this.Label7;
			location = new Point(547, 409);
			arg_378_0.Location = location;
			this.Label7.Name = "Label7";
			Control arg_3A3_0 = this.Label7;
			size = new Size(89, 28);
			arg_3A3_0.Size = size;
			this.Label7.TabIndex = 6;
			this.Label7.Text = "شماره کارت";
			this.Label8.BackColor = Color.Transparent;
			this.Label8.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.Label8.Font = new Font("Courier New", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_420_0 = this.Label8;
			location = new Point(237, 407);
			arg_420_0.Location = location;
			this.Label8.Name = "Label8";
			Control arg_44E_0 = this.Label8;
			size = new Size(405, 31);
			arg_44E_0.Size = size;
			this.Label8.TabIndex = 7;
			this.Label8.Text = "6362 1411 0457 6815";
			this.Label8.TextAlign = ContentAlignment.MiddleLeft;
			this.PictureBox1.BackColor = Color.Transparent;
			this.PictureBox1.Image = (Image)componentResourceManager.GetObject("PictureBox1.Image");
			Control arg_4C3_0 = this.PictureBox1;
			location = new Point(240, 23);
			arg_4C3_0.Location = location;
			this.PictureBox1.Name = "PictureBox1";
			Control arg_4F4_0 = this.PictureBox1;
			size = new Size(192, 192);
			arg_4F4_0.Size = size;
			this.PictureBox1.SizeMode = PictureBoxSizeMode.AutoSize;
			this.PictureBox1.TabIndex = 2;
			this.PictureBox1.TabStop = false;
			this.UiButton2.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_55C_0 = this.UiButton2;
			location = new Point(426, 452);
			arg_55C_0.Location = location;
			this.UiButton2.Name = "UiButton2";
			this.UiButton2.OfficeColorScheme = OfficeColorScheme.Custom;
			this.UiButton2.OfficeCustomColor = Color.SteelBlue;
			Control arg_5A5_0 = this.UiButton2;
			size = new Size(99, 39);
			arg_5A5_0.Size = size;
			this.UiButton2.TabIndex = 1;
			this.UiButton2.Text = "خروج";
			this.UiButton2.VisualStyle = VisualStyle.Office2010;
			this.UiButton1.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_611_0 = this.UiButton1;
			location = new Point(531, 452);
			arg_611_0.Location = location;
			this.UiButton1.Name = "UiButton1";
			this.UiButton1.OfficeColorScheme = OfficeColorScheme.Custom;
			this.UiButton1.OfficeCustomColor = Color.SteelBlue;
			Control arg_65A_0 = this.UiButton1;
			size = new Size(111, 39);
			arg_65A_0.Size = size;
			this.UiButton1.TabIndex = 0;
			this.UiButton1.Text = "ثبت نرم افزار";
			this.UiButton1.VisualStyle = VisualStyle.Office2010;
			this.Label6.AutoSize = true;
			this.Label6.BackColor = Color.Transparent;
			this.Label6.Font = new Font("Tahoma", 12f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_6E1_0 = this.Label6;
			location = new Point(82, 455);
			arg_6E1_0.Location = location;
			this.Label6.Name = "Label6";
			Control arg_70F_0 = this.Label6;
			size = new Size(147, 19);
			arg_70F_0.Size = size;
			this.Label6.TabIndex = 0;
			this.Label6.Text = "www.tazminco.ir";
			this.Label5.AutoSize = true;
			this.Label5.BackColor = Color.Transparent;
			this.Label5.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_78C_0 = this.Label5;
			location = new Point(235, 452);
			arg_78C_0.Location = location;
			this.Label5.Name = "Label5";
			Control arg_7B7_0 = this.Label5;
			size = new Size(118, 28);
			arg_7B7_0.Size = size;
			this.Label5.TabIndex = 0;
			this.Label5.Text = "آدرس وب سایت";
			this.Label4.AutoSize = true;
			this.Label4.BackColor = Color.Transparent;
			this.Label4.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_834_0 = this.Label4;
			location = new Point(393, 365);
			arg_834_0.Location = location;
			this.Label4.Name = "Label4";
			Control arg_862_0 = this.Label4;
			size = new Size(249, 28);
			arg_862_0.Size = size;
			this.Label4.TabIndex = 0;
			this.Label4.Text = "تلفن بخش فروش : 09390244096";
			this.Label3.AutoSize = true;
			this.Label3.BackColor = Color.Transparent;
			this.Label3.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_8DC_0 = this.Label3;
			location = new Point(115, 325);
			arg_8DC_0.Location = location;
			this.Label3.Name = "Label3";
			Control arg_90A_0 = this.Label3;
			size = new Size(529, 28);
			arg_90A_0.Size = size;
			this.Label3.TabIndex = 0;
			this.Label3.Text = "در صورت تمایل میتوانید با دریافت سریال فعال سازی اقدام به ثبت نرم افزار نمائید";
			this.Label1.AutoSize = true;
			this.Label1.BackColor = Color.Transparent;
			this.Label1.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_987_0 = this.Label1;
			location = new Point(558, 246);
			arg_987_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_9B2_0 = this.Label1;
			size = new Size(86, 28);
			arg_9B2_0.Size = size;
			this.Label1.TabIndex = 0;
			this.Label1.Text = "کاربر گرامی";
			this.Label2.AutoSize = true;
			this.Label2.BackColor = Color.Transparent;
			this.Label2.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			Control arg_A2F_0 = this.Label2;
			location = new Point(272, 288);
			arg_A2F_0.Location = location;
			this.Label2.Name = "Label2";
			Control arg_A5D_0 = this.Label2;
			size = new Size(372, 28);
			arg_A5D_0.Size = size;
			this.Label2.TabIndex = 0;
			this.Label2.Text = "مدت زمان شما برای تست نرم افزار به پایان رسیده است";
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			size = new Size(685, 512);
			this.ClientSize = size;
			this.Controls.Add(this.UiGroupBox1);
			this.FormBorderStyle = FormBorderStyle.FixedSingle;
			this.KeyPreview = true;
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "Frm_Secure";
			this.ShowInTaskbar = false;
			this.StartPosition = FormStartPosition.CenterScreen;
			((ISupportInitialize)this.UiGroupBox1).EndInit();
			this.UiGroupBox1.ResumeLayout(false);
			((ISupportInitialize)this.UiGroupBox2).EndInit();
			this.UiGroupBox2.ResumeLayout(false);
			this.UiGroupBox2.PerformLayout();
			((ISupportInitialize)this.PictureBox1).EndInit();
			this.ResumeLayout(false);
		}

		// Token: 0x17000301 RID: 769
		// (get) Token: 0x060009E9 RID: 2537 RVA: 0x0018CCD4 File Offset: 0x0018B0D4
		// (set) Token: 0x060009EA RID: 2538 RVA: 0x0018CCEC File Offset: 0x0018B0EC
		internal virtual UIGroupBox UiGroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UiGroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._UiGroupBox1 = value;
			}
		}

		// Token: 0x17000302 RID: 770
		// (get) Token: 0x060009EB RID: 2539 RVA: 0x0018CCF8 File Offset: 0x0018B0F8
		// (set) Token: 0x060009EC RID: 2540 RVA: 0x0018CD10 File Offset: 0x0018B110
		internal virtual UIGroupBox UiGroupBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UiGroupBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.UiGroupBox2_Click);
				bool flag = this._UiGroupBox2 != null;
				if (flag)
				{
					this._UiGroupBox2.Click -= value2;
				}
				this._UiGroupBox2 = value;
				flag = (this._UiGroupBox2 != null);
				if (flag)
				{
					this._UiGroupBox2.Click += value2;
				}
			}
		}

		// Token: 0x17000303 RID: 771
		// (get) Token: 0x060009ED RID: 2541 RVA: 0x0018CD70 File Offset: 0x0018B170
		// (set) Token: 0x060009EE RID: 2542 RVA: 0x0018CD88 File Offset: 0x0018B188
		internal virtual Label Label3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label3 = value;
			}
		}

		// Token: 0x17000304 RID: 772
		// (get) Token: 0x060009EF RID: 2543 RVA: 0x0018CD94 File Offset: 0x0018B194
		// (set) Token: 0x060009F0 RID: 2544 RVA: 0x0018CDAC File Offset: 0x0018B1AC
		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		// Token: 0x17000305 RID: 773
		// (get) Token: 0x060009F1 RID: 2545 RVA: 0x0018CDB8 File Offset: 0x0018B1B8
		// (set) Token: 0x060009F2 RID: 2546 RVA: 0x0018CDD0 File Offset: 0x0018B1D0
		internal virtual Label Label2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label2 = value;
			}
		}

		// Token: 0x17000306 RID: 774
		// (get) Token: 0x060009F3 RID: 2547 RVA: 0x0018CDDC File Offset: 0x0018B1DC
		// (set) Token: 0x060009F4 RID: 2548 RVA: 0x0018CDF4 File Offset: 0x0018B1F4
		internal virtual UIButton UiButton1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UiButton1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.UiButton1_Click);
				bool flag = this._UiButton1 != null;
				if (flag)
				{
					this._UiButton1.Click -= value2;
				}
				this._UiButton1 = value;
				flag = (this._UiButton1 != null);
				if (flag)
				{
					this._UiButton1.Click += value2;
				}
			}
		}

		// Token: 0x17000307 RID: 775
		// (get) Token: 0x060009F5 RID: 2549 RVA: 0x0018CE54 File Offset: 0x0018B254
		// (set) Token: 0x060009F6 RID: 2550 RVA: 0x0018CE6C File Offset: 0x0018B26C
		internal virtual UIButton UiButton2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UiButton2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.UiButton2_Click);
				bool flag = this._UiButton2 != null;
				if (flag)
				{
					this._UiButton2.Click -= value2;
				}
				this._UiButton2 = value;
				flag = (this._UiButton2 != null);
				if (flag)
				{
					this._UiButton2.Click += value2;
				}
			}
		}

		// Token: 0x17000308 RID: 776
		// (get) Token: 0x060009F7 RID: 2551 RVA: 0x0018CECC File Offset: 0x0018B2CC
		// (set) Token: 0x060009F8 RID: 2552 RVA: 0x0018CEE4 File Offset: 0x0018B2E4
		internal virtual Label Label4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label4 = value;
			}
		}

		// Token: 0x17000309 RID: 777
		// (get) Token: 0x060009F9 RID: 2553 RVA: 0x0018CEF0 File Offset: 0x0018B2F0
		// (set) Token: 0x060009FA RID: 2554 RVA: 0x0018CF08 File Offset: 0x0018B308
		internal virtual Label Label6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label6 = value;
			}
		}

		// Token: 0x1700030A RID: 778
		// (get) Token: 0x060009FB RID: 2555 RVA: 0x0018CF14 File Offset: 0x0018B314
		// (set) Token: 0x060009FC RID: 2556 RVA: 0x0018CF2C File Offset: 0x0018B32C
		internal virtual Label Label5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label5 = value;
			}
		}

		// Token: 0x1700030B RID: 779
		// (get) Token: 0x060009FD RID: 2557 RVA: 0x0018CF38 File Offset: 0x0018B338
		// (set) Token: 0x060009FE RID: 2558 RVA: 0x0018CF50 File Offset: 0x0018B350
		internal virtual PictureBox PictureBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox1 = value;
			}
		}

		// Token: 0x1700030C RID: 780
		// (get) Token: 0x060009FF RID: 2559 RVA: 0x0018CF5C File Offset: 0x0018B35C
		// (set) Token: 0x06000A00 RID: 2560 RVA: 0x0018CF74 File Offset: 0x0018B374
		internal virtual Label Label7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label7 = value;
			}
		}

		// Token: 0x1700030D RID: 781
		// (get) Token: 0x06000A01 RID: 2561 RVA: 0x0018CF80 File Offset: 0x0018B380
		// (set) Token: 0x06000A02 RID: 2562 RVA: 0x0018CF98 File Offset: 0x0018B398
		internal virtual Label Label8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label8 = value;
			}
		}

		// Token: 0x06000A03 RID: 2563 RVA: 0x0018CFA4 File Offset: 0x0018B3A4
		[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
		private void UiButton2_Click(object sender, EventArgs e)
		{
			ProjectData.EndApp();
		}

		// Token: 0x06000A04 RID: 2564 RVA: 0x0018CFB0 File Offset: 0x0018B3B0
		private void UiButton1_Click(object sender, EventArgs e)
		{
			Frm_Register frm_Register = new Frm_Register();
			frm_Register.ShowDialog();
		}

		// Token: 0x06000A05 RID: 2565 RVA: 0x0018CFCC File Offset: 0x0018B3CC
		[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
		private void Frm_Secure_FormClosing(object sender, FormClosingEventArgs e)
		{
			ProjectData.EndApp();
		}

		// Token: 0x06000A06 RID: 2566 RVA: 0x0018CFD8 File Offset: 0x0018B3D8
		private void UiGroupBox2_Click(object sender, EventArgs e)
		{
		}

		// Token: 0x040003E8 RID: 1000
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		// Token: 0x040003E9 RID: 1001
		private IContainer components;

		// Token: 0x040003EA RID: 1002
		[AccessedThroughProperty("UiGroupBox1")]
		private UIGroupBox _UiGroupBox1;

		// Token: 0x040003EB RID: 1003
		[AccessedThroughProperty("UiGroupBox2")]
		private UIGroupBox _UiGroupBox2;

		// Token: 0x040003EC RID: 1004
		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		// Token: 0x040003ED RID: 1005
		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		// Token: 0x040003EE RID: 1006
		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		// Token: 0x040003EF RID: 1007
		[AccessedThroughProperty("UiButton1")]
		private UIButton _UiButton1;

		// Token: 0x040003F0 RID: 1008
		[AccessedThroughProperty("UiButton2")]
		private UIButton _UiButton2;

		// Token: 0x040003F1 RID: 1009
		[AccessedThroughProperty("Label4")]
		private Label _Label4;

		// Token: 0x040003F2 RID: 1010
		[AccessedThroughProperty("Label6")]
		private Label _Label6;

		// Token: 0x040003F3 RID: 1011
		[AccessedThroughProperty("Label5")]
		private Label _Label5;

		// Token: 0x040003F4 RID: 1012
		[AccessedThroughProperty("PictureBox1")]
		private PictureBox _PictureBox1;

		// Token: 0x040003F5 RID: 1013
		[AccessedThroughProperty("Label7")]
		private Label _Label7;

		// Token: 0x040003F6 RID: 1014
		[AccessedThroughProperty("Label8")]
		private Label _Label8;
	}
}
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using DevComponents.DotNetBar;
using FruitBox.My;
using FruitBox.My.Resources;
using Janus.Windows.EditControls;
using Janus.Windows.GridEX;
using Janus.Windows.UI.Dock;
using Microsoft.VisualBasic.CompilerServices;

namespace FruitBox
{
	// Token: 0x02000072 RID: 114
	[DesignerGenerated]
	public class Frm_Password : Form
	{
		// Token: 0x060008F1 RID: 2289 RVA: 0x001839F8 File Offset: 0x00181DF8
		public Frm_Password()
		{
			base.KeyDown += new KeyEventHandler(this.Frm_Password_KeyDown);
			Frm_Password.__ENCAddToList(this);
			int auth_type = 1;
			this.Auth_type = auth_type;
			this.user = new base_user();
			this.InitializeComponent();
		}

		// Token: 0x060008F2 RID: 2290 RVA: 0x00183A44 File Offset: 0x00181E44
		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Password.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Password.__ENCList.Count == Frm_Password.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Password.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Password.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Password.__ENCList[num] = Frm_Password.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Password.__ENCList.RemoveRange(num, Frm_Password.__ENCList.Count - num);
						Frm_Password.__ENCList.Capacity = Frm_Password.__ENCList.Count;
					}
					Frm_Password.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		// Token: 0x060008F3 RID: 2291 RVA: 0x00183B48 File Offset: 0x00181F48
		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		// Token: 0x060008F4 RID: 2292 RVA: 0x00183B98 File Offset: 0x00181F98
		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			this.Label1 = new Label();
			this.ButtonX1 = new ButtonX();
			this.PictureBox1 = new PictureBox();
			this.EditBox1 = new EditBox(this.components);
			this.UiGroupBox1 = new UIGroupBox();
			this.ButtonX2 = new ButtonX();
			((ISupportInitialize)this.PictureBox1).BeginInit();
			((ISupportInitialize)this.UiGroupBox1).BeginInit();
			this.UiGroupBox1.SuspendLayout();
			this.SuspendLayout();
			this.Label1.AutoSize = true;
			this.Label1.BackColor = Color.Transparent;
			this.Label1.Font = new Font("Tahoma", 12f, FontStyle.Regular, GraphicsUnit.Point, 178);
			Control arg_DB_0 = this.Label1;
			Point location = new Point(306, 22);
			arg_DB_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_109_0 = this.Label1;
			Size size = new Size(150, 19);
			arg_109_0.Size = size;
			this.Label1.TabIndex = 3;
			this.Label1.Text = "رمز عبور را وارد نمائید";
			this.ButtonX1.AccessibleRole = AccessibleRole.PushButton;
			this.ButtonX1.ColorTable = eButtonColor.OrangeWithBackground;
			this.ButtonX1.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			this.ButtonX1.Image = Resources.accept;
			Control arg_191_0 = this.ButtonX1;
			location = new Point(213, 65);
			arg_191_0.Location = location;
			this.ButtonX1.Name = "ButtonX1";
			Control arg_1BC_0 = this.ButtonX1;
			size = new Size(90, 35);
			arg_1BC_0.Size = size;
			this.ButtonX1.Style = eDotNetBarStyle.OfficeMobile2014;
			this.ButtonX1.TabIndex = 2;
			this.ButtonX1.Text = "ورود";
			this.PictureBox1.BackColor = Color.Transparent;
			this.PictureBox1.Image = Resources.key;
			Control arg_222_0 = this.PictureBox1;
			location = new Point(22, 15);
			arg_222_0.Location = location;
			this.PictureBox1.Name = "PictureBox1";
			Control arg_24D_0 = this.PictureBox1;
			size = new Size(64, 64);
			arg_24D_0.Size = size;
			this.PictureBox1.SizeMode = PictureBoxSizeMode.AutoSize;
			this.PictureBox1.TabIndex = 0;
			this.PictureBox1.TabStop = false;
			this.EditBox1.AcceptEnter = true;
			this.EditBox1.AllowEdit = true;
			this.EditBox1.AllowNew = true;
			this.EditBox1.FocusColor = true;
			this.EditBox1.Font = new Font("Tahoma", 12f, FontStyle.Regular, GraphicsUnit.Point, 178);
			Control arg_2E3_0 = this.EditBox1;
			location = new Point(113, 18);
			arg_2E3_0.Location = location;
			this.EditBox1.Name = "EditBox1";
			this.EditBox1.Nullable = true;
			this.EditBox1.NullToolTipText = "این قسمت نمیتواند خالی باشد";
			this.EditBox1.PasswordChar = '*';
			this.EditBox1.ShortcutsEnabled = false;
			Control arg_34A_0 = this.EditBox1;
			size = new Size(190, 27);
			arg_34A_0.Size = size;
			this.EditBox1.TabIndex = 1;
			this.EditBox1.VisualStyle = VisualStyle.Office2010;
			this.UiGroupBox1.BackgroundStyle = BackgroundStyle.Panel;
			this.UiGroupBox1.Controls.Add(this.Label1);
			this.UiGroupBox1.Controls.Add(this.EditBox1);
			this.UiGroupBox1.Controls.Add(this.PictureBox1);
			this.UiGroupBox1.Controls.Add(this.ButtonX1);
			this.UiGroupBox1.Controls.Add(this.ButtonX2);
			this.UiGroupBox1.Dock = DockStyle.Fill;
			this.UiGroupBox1.FrameStyle = Janus.Windows.EditControls.FrameStyle.None;
			Control arg_415_0 = this.UiGroupBox1;
			location = new Point(0, 0);
			arg_415_0.Location = location;
			this.UiGroupBox1.Name = "UiGroupBox1";
			Control arg_443_0 = this.UiGroupBox1;
			size = new Size(471, 127);
			arg_443_0.Size = size;
			this.UiGroupBox1.TabIndex = 5;
			this.UiGroupBox1.VisualStyle = PanelVisualStyle.Office2010;
			this.ButtonX2.AccessibleRole = AccessibleRole.PushButton;
			this.ButtonX2.ColorTable = eButtonColor.OrangeWithBackground;
			this.ButtonX2.Font = new Font("Mitra", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 178);
			this.ButtonX2.Image = Resources.delete;
			Control arg_4C4_0 = this.ButtonX2;
			location = new Point(113, 65);
			arg_4C4_0.Location = location;
			this.ButtonX2.Name = "ButtonX2";
			Control arg_4EF_0 = this.ButtonX2;
			size = new Size(94, 35);
			arg_4EF_0.Size = size;
			this.ButtonX2.Style = eDotNetBarStyle.OfficeMobile2014;
			this.ButtonX2.TabIndex = 2;
			this.ButtonX2.Text = "انصراف";
			SizeF autoScaleDimensions = new SizeF(7f, 14f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			size = new Size(471, 127);
			this.ClientSize = size;
			this.Controls.Add(this.UiGroupBox1);
			this.Font = new Font("Tahoma", 9f, FontStyle.Regular, GraphicsUnit.Point, 178);
			this.FormBorderStyle = FormBorderStyle.FixedDialog;
			this.KeyPreview = true;
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "Frm_Password";
			this.RightToLeft = RightToLeft.Yes;
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "رمز ویژه";
			((ISupportInitialize)this.PictureBox1).EndInit();
			((ISupportInitialize)this.UiGroupBox1).EndInit();
			this.UiGroupBox1.ResumeLayout(false);
			this.UiGroupBox1.PerformLayout();
			this.ResumeLayout(false);
		}

		// Token: 0x170002A9 RID: 681
		// (get) Token: 0x060008F5 RID: 2293 RVA: 0x001841B4 File Offset: 0x001825B4
		// (set) Token: 0x060008F6 RID: 2294 RVA: 0x001841CC File Offset: 0x001825CC
		internal virtual PictureBox PictureBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox1 = value;
			}
		}

		// Token: 0x170002AA RID: 682
		// (get) Token: 0x060008F7 RID: 2295 RVA: 0x001841D8 File Offset: 0x001825D8
		// (set) Token: 0x060008F8 RID: 2296 RVA: 0x001841F0 File Offset: 0x001825F0
		internal virtual EditBox EditBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._EditBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._EditBox1 = value;
			}
		}

		// Token: 0x170002AB RID: 683
		// (get) Token: 0x060008F9 RID: 2297 RVA: 0x001841FC File Offset: 0x001825FC
		// (set) Token: 0x060008FA RID: 2298 RVA: 0x00184214 File Offset: 0x00182614
		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		// Token: 0x170002AC RID: 684
		// (get) Token: 0x060008FB RID: 2299 RVA: 0x00184220 File Offset: 0x00182620
		// (set) Token: 0x060008FC RID: 2300 RVA: 0x00184238 File Offset: 0x00182638
		internal virtual ButtonX ButtonX1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ButtonX1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ButtonX1_Click);
				bool flag = this._ButtonX1 != null;
				if (flag)
				{
					this._ButtonX1.Click -= value2;
				}
				this._ButtonX1 = value;
				flag = (this._ButtonX1 != null);
				if (flag)
				{
					this._ButtonX1.Click += value2;
				}
			}
		}

		// Token: 0x170002AD RID: 685
		// (get) Token: 0x060008FD RID: 2301 RVA: 0x00184298 File Offset: 0x00182698
		// (set) Token: 0x060008FE RID: 2302 RVA: 0x001842B0 File Offset: 0x001826B0
		internal virtual UIGroupBox UiGroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UiGroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._UiGroupBox1 = value;
			}
		}

		// Token: 0x170002AE RID: 686
		// (get) Token: 0x060008FF RID: 2303 RVA: 0x001842BC File Offset: 0x001826BC
		// (set) Token: 0x06000900 RID: 2304 RVA: 0x001842D4 File Offset: 0x001826D4
		internal virtual ButtonX ButtonX2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ButtonX2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ButtonX2_Click);
				bool flag = this._ButtonX2 != null;
				if (flag)
				{
					this._ButtonX2.Click -= value2;
				}
				this._ButtonX2 = value;
				flag = (this._ButtonX2 != null);
				if (flag)
				{
					this._ButtonX2.Click += value2;
				}
			}
		}

		// Token: 0x170002AF RID: 687
		// (get) Token: 0x06000901 RID: 2305 RVA: 0x00184334 File Offset: 0x00182734
		// (set) Token: 0x06000902 RID: 2306 RVA: 0x0018434C File Offset: 0x0018274C
		public int Auth_type
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Auth_type;
			}
			[DebuggerNonUserCode]
			set
			{
				this._Auth_type = value;
			}
		}

		// Token: 0x06000903 RID: 2307 RVA: 0x00184358 File Offset: 0x00182758
		private void ButtonX1_Click(object sender, EventArgs e)
		{
			bool flag = this.Auth_type == 1;
			bool flag2;
			if (flag)
			{
				flag2 = this.user.Login(MyProject.Forms.Form_Main.txt_user.SelectedItem.Text, this.EditBox1.Text);
				if (flag2)
				{
					this.DialogResult = DialogResult.OK;
					this.Close();
				}
				else
				{
					Public_Function.ShowMessage("گذر واژه اشتباه میباشد", MessageBoxButtons.OK, MessageBoxIcon.Exclamation, null);
					this.EditBox1.Text = string.Empty;
					this.EditBox1.Focus();
				}
			}
			flag2 = (this.Auth_type == 2);
			if (flag2)
			{
				flag = (Operators.CompareString(this.EditBox1.Text, Public_Function.dict["pidkey"], false) == 0);
				if (flag)
				{
					this.DialogResult = DialogResult.OK;
					this.Close();
				}
				else
				{
					Public_Function.ShowMessage("گذر واژه اشتباه میباشد", MessageBoxButtons.OK, MessageBoxIcon.Exclamation, null);
					this.EditBox1.Text = string.Empty;
					this.EditBox1.Focus();
				}
			}
		}

		// Token: 0x06000904 RID: 2308 RVA: 0x0018445C File Offset: 0x0018285C
		private void Frm_Password_KeyDown(object sender, KeyEventArgs e)
		{
			bool flag = e.KeyCode == Keys.Escape;
			if (flag)
			{
				this.DialogResult = DialogResult.Cancel;
				this.Close();
			}
		}

		// Token: 0x06000905 RID: 2309 RVA: 0x0018448C File Offset: 0x0018288C
		private void ButtonX2_Click(object sender, EventArgs e)
		{
			this.DialogResult = DialogResult.Cancel;
			this.Close();
		}

		// Token: 0x0400037E RID: 894
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		// Token: 0x0400037F RID: 895
		private IContainer components;

		// Token: 0x04000380 RID: 896
		[AccessedThroughProperty("PictureBox1")]
		private PictureBox _PictureBox1;

		// Token: 0x04000381 RID: 897
		[AccessedThroughProperty("EditBox1")]
		private EditBox _EditBox1;

		// Token: 0x04000382 RID: 898
		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		// Token: 0x04000383 RID: 899
		[AccessedThroughProperty("ButtonX1")]
		private ButtonX _ButtonX1;

		// Token: 0x04000384 RID: 900
		[AccessedThroughProperty("UiGroupBox1")]
		private UIGroupBox _UiGroupBox1;

		// Token: 0x04000385 RID: 901
		[AccessedThroughProperty("ButtonX2")]
		private ButtonX _ButtonX2;

		// Token: 0x04000386 RID: 902
		[CompilerGenerated]
		private int _Auth_type;

		// Token: 0x04000387 RID: 903
		private base_user user;
	}
}
